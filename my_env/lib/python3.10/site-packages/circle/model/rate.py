# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class Rate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "buy",
            "sell",
            "createDate",
        }
        
        class properties:
            buy = schemas.StrSchema
            sell = schemas.StrSchema
            createDate = schemas.StrSchema
            __annotations__ = {
                "buy": buy,
                "sell": sell,
                "createDate": createDate,
            }
    
    buy: MetaOapg.properties.buy
    sell: MetaOapg.properties.sell
    createDate: MetaOapg.properties.createDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buy"]) -> MetaOapg.properties.buy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sell"]) -> MetaOapg.properties.sell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buy", "sell", "createDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buy"]) -> MetaOapg.properties.buy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sell"]) -> MetaOapg.properties.sell: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buy", "sell", "createDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        buy: typing.Union[MetaOapg.properties.buy, str, ],
        sell: typing.Union[MetaOapg.properties.sell, str, ],
        createDate: typing.Union[MetaOapg.properties.createDate, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Rate':
        return super().__new__(
            cls,
            *_args,
            buy=buy,
            sell=sell,
            createDate=createDate,
            _configuration=_configuration,
            **kwargs,
        )
