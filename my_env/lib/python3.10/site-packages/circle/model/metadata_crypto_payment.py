# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class MetadataCryptoPayment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "signatureValidBefore",
            "rawSignature",
            "metaTxNonce",
            "signatureValidAfter",
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "TransferWithAuthorization": "TRANSFER_WITH_AUTHORIZATION",
                    }
                
                @schemas.classproperty
                def TRANSFER_WITH_AUTHORIZATION(cls):
                    return cls("TransferWithAuthorization")
            metaTxNonce = schemas.StrSchema
            signatureValidAfter = schemas.StrSchema
            signatureValidBefore = schemas.StrSchema
            rawSignature = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "metaTxNonce": metaTxNonce,
                "signatureValidAfter": signatureValidAfter,
                "signatureValidBefore": signatureValidBefore,
                "rawSignature": rawSignature,
            }
    
    signatureValidBefore: MetaOapg.properties.signatureValidBefore
    rawSignature: MetaOapg.properties.rawSignature
    metaTxNonce: MetaOapg.properties.metaTxNonce
    signatureValidAfter: MetaOapg.properties.signatureValidAfter
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metaTxNonce"]) -> MetaOapg.properties.metaTxNonce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureValidAfter"]) -> MetaOapg.properties.signatureValidAfter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureValidBefore"]) -> MetaOapg.properties.signatureValidBefore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rawSignature"]) -> MetaOapg.properties.rawSignature: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "metaTxNonce", "signatureValidAfter", "signatureValidBefore", "rawSignature", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metaTxNonce"]) -> MetaOapg.properties.metaTxNonce: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureValidAfter"]) -> MetaOapg.properties.signatureValidAfter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureValidBefore"]) -> MetaOapg.properties.signatureValidBefore: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rawSignature"]) -> MetaOapg.properties.rawSignature: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "metaTxNonce", "signatureValidAfter", "signatureValidBefore", "rawSignature", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        signatureValidBefore: typing.Union[MetaOapg.properties.signatureValidBefore, str, ],
        rawSignature: typing.Union[MetaOapg.properties.rawSignature, str, ],
        metaTxNonce: typing.Union[MetaOapg.properties.metaTxNonce, str, ],
        signatureValidAfter: typing.Union[MetaOapg.properties.signatureValidAfter, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetadataCryptoPayment':
        return super().__new__(
            cls,
            *_args,
            signatureValidBefore=signatureValidBefore,
            rawSignature=rawSignature,
            metaTxNonce=metaTxNonce,
            signatureValidAfter=signatureValidAfter,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
