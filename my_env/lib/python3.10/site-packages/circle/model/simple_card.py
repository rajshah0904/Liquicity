# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class SimpleCard(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "expMonth",
            "updateDate",
            "billingDetails",
            "expYear",
            "fingerprint",
            "id",
            "verification",
            "createDate",
            "network",
            "status",
        }
        
        class properties:
            id = schemas.UUIDSchema
        
            @staticmethod
            def status() -> typing.Type['ExternalFiatAccountStatus']:
                return ExternalFiatAccountStatus
        
            @staticmethod
            def billingDetails() -> typing.Type['SimpleBillingDetails']:
                return SimpleBillingDetails
            expMonth = schemas.IntSchema
            expYear = schemas.IntSchema
            
            
            class network(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VISA": "VISA",
                        "MASTERCARD": "MASTERCARD",
                        "AMEX": "AMEX",
                        "UNKNOWN": "UNKNOWN",
                    }
                
                @schemas.classproperty
                def VISA(cls):
                    return cls("VISA")
                
                @schemas.classproperty
                def MASTERCARD(cls):
                    return cls("MASTERCARD")
                
                @schemas.classproperty
                def AMEX(cls):
                    return cls("AMEX")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("UNKNOWN")
            fingerprint = schemas.StrSchema
        
            @staticmethod
            def verification() -> typing.Type['CardVerificationResponse']:
                return CardVerificationResponse
            createDate = schemas.StrSchema
            updateDate = schemas.StrSchema
            bin = schemas.StrSchema
            issuerCountry = schemas.StrSchema
            
            
            class fundingType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "credit": "CREDIT",
                        "debit": "DEBIT",
                        "prepaid": "PREPAID",
                        "unknown": "UNKNOWN",
                    }
                
                @schemas.classproperty
                def CREDIT(cls):
                    return cls("credit")
                
                @schemas.classproperty
                def DEBIT(cls):
                    return cls("debit")
                
                @schemas.classproperty
                def PREPAID(cls):
                    return cls("prepaid")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("unknown")
        
            @staticmethod
            def riskEvaluation() -> typing.Type['RiskEvaluation']:
                return RiskEvaluation
            __annotations__ = {
                "id": id,
                "status": status,
                "billingDetails": billingDetails,
                "expMonth": expMonth,
                "expYear": expYear,
                "network": network,
                "fingerprint": fingerprint,
                "verification": verification,
                "createDate": createDate,
                "updateDate": updateDate,
                "bin": bin,
                "issuerCountry": issuerCountry,
                "fundingType": fundingType,
                "riskEvaluation": riskEvaluation,
            }
    
    expMonth: MetaOapg.properties.expMonth
    updateDate: MetaOapg.properties.updateDate
    billingDetails: 'SimpleBillingDetails'
    expYear: MetaOapg.properties.expYear
    fingerprint: MetaOapg.properties.fingerprint
    id: MetaOapg.properties.id
    verification: 'CardVerificationResponse'
    createDate: MetaOapg.properties.createDate
    network: MetaOapg.properties.network
    status: 'ExternalFiatAccountStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ExternalFiatAccountStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingDetails"]) -> 'SimpleBillingDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expMonth"]) -> MetaOapg.properties.expMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expYear"]) -> MetaOapg.properties.expYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification"]) -> 'CardVerificationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin"]) -> MetaOapg.properties.bin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuerCountry"]) -> MetaOapg.properties.issuerCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fundingType"]) -> MetaOapg.properties.fundingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskEvaluation"]) -> 'RiskEvaluation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "billingDetails", "expMonth", "expYear", "network", "fingerprint", "verification", "createDate", "updateDate", "bin", "issuerCountry", "fundingType", "riskEvaluation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ExternalFiatAccountStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingDetails"]) -> 'SimpleBillingDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expMonth"]) -> MetaOapg.properties.expMonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expYear"]) -> MetaOapg.properties.expYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification"]) -> 'CardVerificationResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin"]) -> typing.Union[MetaOapg.properties.bin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuerCountry"]) -> typing.Union[MetaOapg.properties.issuerCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fundingType"]) -> typing.Union[MetaOapg.properties.fundingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskEvaluation"]) -> typing.Union['RiskEvaluation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "billingDetails", "expMonth", "expYear", "network", "fingerprint", "verification", "createDate", "updateDate", "bin", "issuerCountry", "fundingType", "riskEvaluation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        expMonth: typing.Union[MetaOapg.properties.expMonth, decimal.Decimal, int, ],
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, ],
        billingDetails: 'SimpleBillingDetails',
        expYear: typing.Union[MetaOapg.properties.expYear, decimal.Decimal, int, ],
        fingerprint: typing.Union[MetaOapg.properties.fingerprint, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        verification: 'CardVerificationResponse',
        createDate: typing.Union[MetaOapg.properties.createDate, str, ],
        network: typing.Union[MetaOapg.properties.network, str, ],
        status: 'ExternalFiatAccountStatus',
        bin: typing.Union[MetaOapg.properties.bin, str, schemas.Unset] = schemas.unset,
        issuerCountry: typing.Union[MetaOapg.properties.issuerCountry, str, schemas.Unset] = schemas.unset,
        fundingType: typing.Union[MetaOapg.properties.fundingType, str, schemas.Unset] = schemas.unset,
        riskEvaluation: typing.Union['RiskEvaluation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SimpleCard':
        return super().__new__(
            cls,
            *_args,
            expMonth=expMonth,
            updateDate=updateDate,
            billingDetails=billingDetails,
            expYear=expYear,
            fingerprint=fingerprint,
            id=id,
            verification=verification,
            createDate=createDate,
            network=network,
            status=status,
            bin=bin,
            issuerCountry=issuerCountry,
            fundingType=fundingType,
            riskEvaluation=riskEvaluation,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.card_verification_response import CardVerificationResponse
from circle.model.external_fiat_account_status import ExternalFiatAccountStatus
from circle.model.risk_evaluation import RiskEvaluation
from circle.model.simple_billing_details import SimpleBillingDetails
