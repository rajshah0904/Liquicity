# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class MetadataPayment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ipAddress",
            "sessionId",
            "email",
        }
        
        class properties:
        
            @staticmethod
            def email() -> typing.Type['Email']:
                return Email
        
            @staticmethod
            def sessionId() -> typing.Type['SessionId']:
                return SessionId
            ipAddress = schemas.StrSchema
        
            @staticmethod
            def phoneNumber() -> typing.Type['PhoneNumber']:
                return PhoneNumber
            __annotations__ = {
                "email": email,
                "sessionId": sessionId,
                "ipAddress": ipAddress,
                "phoneNumber": phoneNumber,
            }
    
    ipAddress: MetaOapg.properties.ipAddress
    sessionId: 'SessionId'
    email: 'Email'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'Email': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> 'SessionId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> 'PhoneNumber': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "sessionId", "ipAddress", "phoneNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> 'Email': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> 'SessionId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union['PhoneNumber', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "sessionId", "ipAddress", "phoneNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, ],
        sessionId: 'SessionId',
        email: 'Email',
        phoneNumber: typing.Union['PhoneNumber', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetadataPayment':
        return super().__new__(
            cls,
            *_args,
            ipAddress=ipAddress,
            sessionId=sessionId,
            email=email,
            phoneNumber=phoneNumber,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.email import Email
from circle.model.phone_number import PhoneNumber
from circle.model.session_id import SessionId
