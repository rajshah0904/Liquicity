# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class BusinessRecipientAddressCreationRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Adds a recipient address. The currency parameter will default to USD for all chains except for BTC where it defaults to BTC.
    """


    class MetaOapg:
        required = {
            "chain",
            "address",
            "idempotencyKey",
            "description",
        }
        
        class properties:
            idempotencyKey = schemas.UUIDSchema
            address = schemas.StrSchema
        
            @staticmethod
            def chain() -> typing.Type['Chain']:
                return Chain
            description = schemas.StrSchema
        
            @staticmethod
            def addressTag() -> typing.Type['AddressTag']:
                return AddressTag
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            __annotations__ = {
                "idempotencyKey": idempotencyKey,
                "address": address,
                "chain": chain,
                "description": description,
                "addressTag": addressTag,
                "currency": currency,
            }
    
    chain: 'Chain'
    address: MetaOapg.properties.address
    idempotencyKey: MetaOapg.properties.idempotencyKey
    description: MetaOapg.properties.description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain"]) -> 'Chain': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressTag"]) -> 'AddressTag': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "address", "chain", "description", "addressTag", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain"]) -> 'Chain': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressTag"]) -> typing.Union['AddressTag', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['Currency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "address", "chain", "description", "addressTag", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        chain: 'Chain',
        address: typing.Union[MetaOapg.properties.address, str, ],
        idempotencyKey: typing.Union[MetaOapg.properties.idempotencyKey, str, uuid.UUID, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        addressTag: typing.Union['AddressTag', schemas.Unset] = schemas.unset,
        currency: typing.Union['Currency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BusinessRecipientAddressCreationRequest':
        return super().__new__(
            cls,
            *_args,
            chain=chain,
            address=address,
            idempotencyKey=idempotencyKey,
            description=description,
            addressTag=addressTag,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.address_tag import AddressTag
from circle.model.chain import Chain
from circle.model.currency import Currency
