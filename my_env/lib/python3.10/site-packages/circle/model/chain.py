# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class Chain(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A blockchain that a given currency is available on.
    """


    class MetaOapg:
        enum_value_to_name = {
            "ALGO": "ALGO",
            "ARB": "ARB",
            "AVAX": "AVAX",
            "BASE": "BASE",
            "BTC": "BTC",
            "CELO": "CELO",
            "ETH": "ETH",
            "FLOW": "FLOW",
            "HBAR": "HBAR",
            "NEAR": "NEAR",
            "NOBLE": "NOBLE",
            "OP": "OP",
            "PAH": "PAH",
            "POLY": "POLY",
            "SOL": "SOL",
            "TRX": "TRX",
            "XLM": "XLM",
        }
    
    @schemas.classproperty
    def ALGO(cls):
        return cls("ALGO")
    
    @schemas.classproperty
    def ARB(cls):
        return cls("ARB")
    
    @schemas.classproperty
    def AVAX(cls):
        return cls("AVAX")
    
    @schemas.classproperty
    def BASE(cls):
        return cls("BASE")
    
    @schemas.classproperty
    def BTC(cls):
        return cls("BTC")
    
    @schemas.classproperty
    def CELO(cls):
        return cls("CELO")
    
    @schemas.classproperty
    def ETH(cls):
        return cls("ETH")
    
    @schemas.classproperty
    def FLOW(cls):
        return cls("FLOW")
    
    @schemas.classproperty
    def HBAR(cls):
        return cls("HBAR")
    
    @schemas.classproperty
    def NEAR(cls):
        return cls("NEAR")
    
    @schemas.classproperty
    def NOBLE(cls):
        return cls("NOBLE")
    
    @schemas.classproperty
    def OP(cls):
        return cls("OP")
    
    @schemas.classproperty
    def PAH(cls):
        return cls("PAH")
    
    @schemas.classproperty
    def POLY(cls):
        return cls("POLY")
    
    @schemas.classproperty
    def SOL(cls):
        return cls("SOL")
    
    @schemas.classproperty
    def TRX(cls):
        return cls("TRX")
    
    @schemas.classproperty
    def XLM(cls):
        return cls("XLM")
