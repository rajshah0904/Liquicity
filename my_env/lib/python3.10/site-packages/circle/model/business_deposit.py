# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class BusinessDeposit(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A deposit
    """


    class MetaOapg:
        required = {
            "amount",
            "destination",
            "id",
            "createDate",
            "status",
        }
        
        class properties:
            id = schemas.UUIDSchema
        
            @staticmethod
            def destination() -> typing.Type['WalletLocation']:
                return WalletLocation
        
            @staticmethod
            def amount() -> typing.Type['FiatMoney']:
                return FiatMoney
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "pending": "PENDING",
                        "complete": "COMPLETE",
                        "failed": "FAILED",
                    }
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def COMPLETE(cls):
                    return cls("complete")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
            createDate = schemas.StrSchema
            sourceWalletId = schemas.UUIDSchema
        
            @staticmethod
            def fee() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
        
            @staticmethod
            def riskEvaluation() -> typing.Type['RiskEvaluation']:
                return RiskEvaluation
            updateDate = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "destination": destination,
                "amount": amount,
                "status": status,
                "createDate": createDate,
                "sourceWalletId": sourceWalletId,
                "fee": fee,
                "riskEvaluation": riskEvaluation,
                "updateDate": updateDate,
            }
    
    amount: 'FiatMoney'
    destination: 'WalletLocation'
    id: MetaOapg.properties.id
    createDate: MetaOapg.properties.createDate
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'WalletLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'FiatMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceWalletId"]) -> MetaOapg.properties.sourceWalletId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskEvaluation"]) -> 'RiskEvaluation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "destination", "amount", "status", "createDate", "sourceWalletId", "fee", "riskEvaluation", "updateDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> 'WalletLocation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'FiatMoney': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceWalletId"]) -> typing.Union[MetaOapg.properties.sourceWalletId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union['FiatMoneyUsd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskEvaluation"]) -> typing.Union['RiskEvaluation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> typing.Union[MetaOapg.properties.updateDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "destination", "amount", "status", "createDate", "sourceWalletId", "fee", "riskEvaluation", "updateDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: 'FiatMoney',
        destination: 'WalletLocation',
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        createDate: typing.Union[MetaOapg.properties.createDate, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        sourceWalletId: typing.Union[MetaOapg.properties.sourceWalletId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        fee: typing.Union['FiatMoneyUsd', schemas.Unset] = schemas.unset,
        riskEvaluation: typing.Union['RiskEvaluation', schemas.Unset] = schemas.unset,
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BusinessDeposit':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            destination=destination,
            id=id,
            createDate=createDate,
            status=status,
            sourceWalletId=sourceWalletId,
            fee=fee,
            riskEvaluation=riskEvaluation,
            updateDate=updateDate,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.fiat_money import FiatMoney
from circle.model.fiat_money_usd import FiatMoneyUsd
from circle.model.risk_evaluation import RiskEvaluation
from circle.model.wallet_location import WalletLocation
