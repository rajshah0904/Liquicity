# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class PaymentToken(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "updateDate",
            "cardDetails",
            "expiresOn",
            "id",
            "type",
            "createDate",
        }
        
        class properties:
            id = schemas.UUIDSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "applepay": "APPLEPAY",
                        "googlepay": "GOOGLEPAY",
                    }
                
                @schemas.classproperty
                def APPLEPAY(cls):
                    return cls("applepay")
                
                @schemas.classproperty
                def GOOGLEPAY(cls):
                    return cls("googlepay")
            expiresOn = schemas.DateTimeSchema
        
            @staticmethod
            def cardDetails() -> typing.Type['TokenizedCardDetails']:
                return TokenizedCardDetails
            createDate = schemas.StrSchema
            updateDate = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "expiresOn": expiresOn,
                "cardDetails": cardDetails,
                "createDate": createDate,
                "updateDate": updateDate,
            }
    
    updateDate: MetaOapg.properties.updateDate
    cardDetails: 'TokenizedCardDetails'
    expiresOn: MetaOapg.properties.expiresOn
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    createDate: MetaOapg.properties.createDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresOn"]) -> MetaOapg.properties.expiresOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardDetails"]) -> 'TokenizedCardDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "expiresOn", "cardDetails", "createDate", "updateDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresOn"]) -> MetaOapg.properties.expiresOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardDetails"]) -> 'TokenizedCardDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "expiresOn", "cardDetails", "createDate", "updateDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, ],
        cardDetails: 'TokenizedCardDetails',
        expiresOn: typing.Union[MetaOapg.properties.expiresOn, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        createDate: typing.Union[MetaOapg.properties.createDate, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentToken':
        return super().__new__(
            cls,
            *_args,
            updateDate=updateDate,
            cardDetails=cardDetails,
            expiresOn=expiresOn,
            id=id,
            type=type,
            createDate=createDate,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.tokenized_card_details import TokenizedCardDetails
