# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class BasicChargebackHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "description",
            "type",
            "chargebackAmount",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "1st Chargeback": "ST_CHARGEBACK",
                        "2nd Chargeback": "ND_CHARGEBACK",
                        "Chargeback Reversal": "CHARGEBACK_REVERSAL",
                        "Representment": "REPRESENTMENT",
                        "Chargeback Settlement": "CHARGEBACK_SETTLEMENT",
                    }
                
                @schemas.classproperty
                def ST_CHARGEBACK(cls):
                    return cls("1st Chargeback")
                
                @schemas.classproperty
                def ND_CHARGEBACK(cls):
                    return cls("2nd Chargeback")
                
                @schemas.classproperty
                def CHARGEBACK_REVERSAL(cls):
                    return cls("Chargeback Reversal")
                
                @schemas.classproperty
                def REPRESENTMENT(cls):
                    return cls("Representment")
                
                @schemas.classproperty
                def CHARGEBACK_SETTLEMENT(cls):
                    return cls("Chargeback Settlement")
        
            @staticmethod
            def chargebackAmount() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
            description = schemas.StrSchema
        
            @staticmethod
            def fee() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
        
            @staticmethod
            def settlementId() -> typing.Type['IdSettlement']:
                return IdSettlement
            createDate = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "chargebackAmount": chargebackAmount,
                "description": description,
                "fee": fee,
                "settlementId": settlementId,
                "createDate": createDate,
            }
    
    description: MetaOapg.properties.description
    type: MetaOapg.properties.type
    chargebackAmount: 'FiatMoneyUsd'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chargebackAmount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settlementId"]) -> 'IdSettlement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "chargebackAmount", "description", "fee", "settlementId", "createDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chargebackAmount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union['FiatMoneyUsd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settlementId"]) -> typing.Union['IdSettlement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "chargebackAmount", "description", "fee", "settlementId", "createDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        chargebackAmount: 'FiatMoneyUsd',
        fee: typing.Union['FiatMoneyUsd', schemas.Unset] = schemas.unset,
        settlementId: typing.Union['IdSettlement', schemas.Unset] = schemas.unset,
        createDate: typing.Union[MetaOapg.properties.createDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BasicChargebackHistory':
        return super().__new__(
            cls,
            *_args,
            description=description,
            type=type,
            chargebackAmount=chargebackAmount,
            fee=fee,
            settlementId=settlementId,
            createDate=createDate,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.fiat_money_usd import FiatMoneyUsd
from circle.model.id_settlement import IdSettlement
