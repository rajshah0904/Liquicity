# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class MockWirePaymentResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            trackingRef = schemas.StrSchema
        
            @staticmethod
            def amount() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
        
            @staticmethod
            def beneficiaryBank() -> typing.Type['MockWirePaymentBeneficiaryBankInstruction']:
                return MockWirePaymentBeneficiaryBankInstruction
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "pending": "PENDING",
                        "processed": "PROCESSED",
                        "failed": "FAILED",
                    }
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def PROCESSED(cls):
                    return cls("processed")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
            __annotations__ = {
                "trackingRef": trackingRef,
                "amount": amount,
                "beneficiaryBank": beneficiaryBank,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingRef"]) -> MetaOapg.properties.trackingRef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryBank"]) -> 'MockWirePaymentBeneficiaryBankInstruction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trackingRef", "amount", "beneficiaryBank", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingRef"]) -> typing.Union[MetaOapg.properties.trackingRef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union['FiatMoneyUsd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryBank"]) -> typing.Union['MockWirePaymentBeneficiaryBankInstruction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trackingRef", "amount", "beneficiaryBank", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        trackingRef: typing.Union[MetaOapg.properties.trackingRef, str, schemas.Unset] = schemas.unset,
        amount: typing.Union['FiatMoneyUsd', schemas.Unset] = schemas.unset,
        beneficiaryBank: typing.Union['MockWirePaymentBeneficiaryBankInstruction', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MockWirePaymentResponse':
        return super().__new__(
            cls,
            *_args,
            trackingRef=trackingRef,
            amount=amount,
            beneficiaryBank=beneficiaryBank,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.fiat_money_usd import FiatMoneyUsd
from circle.model.mock_wire_payment_beneficiary_bank_instruction import MockWirePaymentBeneficiaryBankInstruction
