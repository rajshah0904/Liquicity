# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class PresignMessage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "from",
            "to",
            "nonce",
            "validBefore",
            "value",
            "validAfter",
        }
        
        class properties:
            _from = schemas.StrSchema
            to = schemas.StrSchema
            value = schemas.StrSchema
            validAfter = schemas.Int64Schema
            validBefore = schemas.Int64Schema
            nonce = schemas.StrSchema
            __annotations__ = {
                "from": _from,
                "to": to,
                "value": value,
                "validAfter": validAfter,
                "validBefore": validBefore,
                "nonce": nonce,
            }
    
    to: MetaOapg.properties.to
    nonce: MetaOapg.properties.nonce
    validBefore: MetaOapg.properties.validBefore
    value: MetaOapg.properties.value
    validAfter: MetaOapg.properties.validAfter
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validAfter"]) -> MetaOapg.properties.validAfter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validBefore"]) -> MetaOapg.properties.validBefore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["from", "to", "value", "validAfter", "validBefore", "nonce", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validAfter"]) -> MetaOapg.properties.validAfter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validBefore"]) -> MetaOapg.properties.validBefore: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["from", "to", "value", "validAfter", "validBefore", "nonce", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        to: typing.Union[MetaOapg.properties.to, str, ],
        nonce: typing.Union[MetaOapg.properties.nonce, str, ],
        validBefore: typing.Union[MetaOapg.properties.validBefore, decimal.Decimal, int, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        validAfter: typing.Union[MetaOapg.properties.validAfter, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PresignMessage':
        return super().__new__(
            cls,
            *_args,
            to=to,
            nonce=nonce,
            validBefore=validBefore,
            value=value,
            validAfter=validAfter,
            _configuration=_configuration,
            **kwargs,
        )
