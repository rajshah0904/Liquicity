# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class Wire(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "trackingRef",
            "updateDate",
            "billingDetails",
            "fingerprint",
            "description",
            "id",
            "createDate",
            "status",
        }
        
        class properties:
            id = schemas.UUIDSchema
        
            @staticmethod
            def status() -> typing.Type['ExternalFiatAccountStatus']:
                return ExternalFiatAccountStatus
            description = schemas.StrSchema
            trackingRef = schemas.StrSchema
            fingerprint = schemas.StrSchema
        
            @staticmethod
            def billingDetails() -> typing.Type['BillingDetails']:
                return BillingDetails
            createDate = schemas.StrSchema
            updateDate = schemas.StrSchema
        
            @staticmethod
            def bankAddress() -> typing.Type['BankAddress']:
                return BankAddress
            __annotations__ = {
                "id": id,
                "status": status,
                "description": description,
                "trackingRef": trackingRef,
                "fingerprint": fingerprint,
                "billingDetails": billingDetails,
                "createDate": createDate,
                "updateDate": updateDate,
                "bankAddress": bankAddress,
            }
    
    trackingRef: MetaOapg.properties.trackingRef
    updateDate: MetaOapg.properties.updateDate
    billingDetails: 'BillingDetails'
    fingerprint: MetaOapg.properties.fingerprint
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    createDate: MetaOapg.properties.createDate
    status: 'ExternalFiatAccountStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ExternalFiatAccountStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingRef"]) -> MetaOapg.properties.trackingRef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingDetails"]) -> 'BillingDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAddress"]) -> 'BankAddress': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "description", "trackingRef", "fingerprint", "billingDetails", "createDate", "updateDate", "bankAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ExternalFiatAccountStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingRef"]) -> MetaOapg.properties.trackingRef: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingDetails"]) -> 'BillingDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAddress"]) -> typing.Union['BankAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "description", "trackingRef", "fingerprint", "billingDetails", "createDate", "updateDate", "bankAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        trackingRef: typing.Union[MetaOapg.properties.trackingRef, str, ],
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, ],
        billingDetails: 'BillingDetails',
        fingerprint: typing.Union[MetaOapg.properties.fingerprint, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        createDate: typing.Union[MetaOapg.properties.createDate, str, ],
        status: 'ExternalFiatAccountStatus',
        bankAddress: typing.Union['BankAddress', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Wire':
        return super().__new__(
            cls,
            *_args,
            trackingRef=trackingRef,
            updateDate=updateDate,
            billingDetails=billingDetails,
            fingerprint=fingerprint,
            description=description,
            id=id,
            createDate=createDate,
            status=status,
            bankAddress=bankAddress,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.bank_address import BankAddress
from circle.model.billing_details import BillingDetails
from circle.model.external_fiat_account_status import ExternalFiatAccountStatus
