# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class PresignResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Response of the GET /presign endpoint
    """


    class MetaOapg:
        required = {
            "typedData",
        }
        
        class properties:
        
            @staticmethod
            def typedData() -> typing.Type['PresignResponseTypedData']:
                return PresignResponseTypedData
            __annotations__ = {
                "typedData": typedData,
            }
    
    typedData: 'PresignResponseTypedData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typedData"]) -> 'PresignResponseTypedData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["typedData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typedData"]) -> 'PresignResponseTypedData': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typedData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        typedData: 'PresignResponseTypedData',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PresignResponse':
        return super().__new__(
            cls,
            *_args,
            typedData=typedData,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.presign_response_typed_data import PresignResponseTypedData
