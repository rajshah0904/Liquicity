# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class PresignResponseTypedData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The typed data
    """


    class MetaOapg:
        required = {
            "totalAmount",
            "types",
            "primaryType",
            "domain",
            "feeChargeModel",
            "message",
        }
        
        class properties:
        
            @staticmethod
            def domain() -> typing.Type['PresignDomain']:
                return PresignDomain
        
            @staticmethod
            def message() -> typing.Type['PresignMessage']:
                return PresignMessage
        
            @staticmethod
            def totalAmount() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
            
            
            class feeChargeModel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "endUser": "END_USER",
                        "merchant": "MERCHANT",
                    }
                
                @schemas.classproperty
                def END_USER(cls):
                    return cls("endUser")
                
                @schemas.classproperty
                def MERCHANT(cls):
                    return cls("merchant")
        
            @staticmethod
            def types() -> typing.Type['PresignMessageTypes']:
                return PresignMessageTypes
            
            
            class primaryType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "TransferWithAuthorization": "TRANSFER_WITH_AUTHORIZATION",
                        "EIP712Domain": "EIP712DOMAIN",
                    }
                
                @schemas.classproperty
                def TRANSFER_WITH_AUTHORIZATION(cls):
                    return cls("TransferWithAuthorization")
                
                @schemas.classproperty
                def EIP712DOMAIN(cls):
                    return cls("EIP712Domain")
        
            @staticmethod
            def networkFeeQuote() -> typing.Type['NetworkFeeQuote']:
                return NetworkFeeQuote
            __annotations__ = {
                "domain": domain,
                "message": message,
                "totalAmount": totalAmount,
                "feeChargeModel": feeChargeModel,
                "types": types,
                "primaryType": primaryType,
                "networkFeeQuote": networkFeeQuote,
            }
    
    totalAmount: 'FiatMoneyUsd'
    types: 'PresignMessageTypes'
    primaryType: MetaOapg.properties.primaryType
    domain: 'PresignDomain'
    feeChargeModel: MetaOapg.properties.feeChargeModel
    message: 'PresignMessage'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'PresignDomain': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> 'PresignMessage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAmount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeChargeModel"]) -> MetaOapg.properties.feeChargeModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> 'PresignMessageTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryType"]) -> MetaOapg.properties.primaryType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkFeeQuote"]) -> 'NetworkFeeQuote': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain", "message", "totalAmount", "feeChargeModel", "types", "primaryType", "networkFeeQuote", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> 'PresignDomain': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> 'PresignMessage': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAmount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeChargeModel"]) -> MetaOapg.properties.feeChargeModel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> 'PresignMessageTypes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryType"]) -> MetaOapg.properties.primaryType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkFeeQuote"]) -> typing.Union['NetworkFeeQuote', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain", "message", "totalAmount", "feeChargeModel", "types", "primaryType", "networkFeeQuote", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        totalAmount: 'FiatMoneyUsd',
        types: 'PresignMessageTypes',
        primaryType: typing.Union[MetaOapg.properties.primaryType, str, ],
        domain: 'PresignDomain',
        feeChargeModel: typing.Union[MetaOapg.properties.feeChargeModel, str, ],
        message: 'PresignMessage',
        networkFeeQuote: typing.Union['NetworkFeeQuote', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PresignResponseTypedData':
        return super().__new__(
            cls,
            *_args,
            totalAmount=totalAmount,
            types=types,
            primaryType=primaryType,
            domain=domain,
            feeChargeModel=feeChargeModel,
            message=message,
            networkFeeQuote=networkFeeQuote,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.fiat_money_usd import FiatMoneyUsd
from circle.model.network_fee_quote import NetworkFeeQuote
from circle.model.presign_domain import PresignDomain
from circle.model.presign_message import PresignMessage
from circle.model.presign_message_types import PresignMessageTypes
