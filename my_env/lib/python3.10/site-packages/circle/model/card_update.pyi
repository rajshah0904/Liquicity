# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class CardUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "encryptedData",
            "keyId",
        }
        
        class properties:
            keyId = schemas.UUIDSchema
            encryptedData = schemas.StrSchema
        
            @staticmethod
            def expMonth() -> typing.Type['CardExpMonth']:
                return CardExpMonth
        
            @staticmethod
            def expYear() -> typing.Type['CardExpYear']:
                return CardExpYear
        
            @staticmethod
            def billingDetails() -> typing.Type['UpdateBillingDetails']:
                return UpdateBillingDetails
            __annotations__ = {
                "keyId": keyId,
                "encryptedData": encryptedData,
                "expMonth": expMonth,
                "expYear": expYear,
                "billingDetails": billingDetails,
            }
    
    encryptedData: MetaOapg.properties.encryptedData
    keyId: MetaOapg.properties.keyId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyId"]) -> MetaOapg.properties.keyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptedData"]) -> MetaOapg.properties.encryptedData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expMonth"]) -> 'CardExpMonth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expYear"]) -> 'CardExpYear': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingDetails"]) -> 'UpdateBillingDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["keyId", "encryptedData", "expMonth", "expYear", "billingDetails", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyId"]) -> MetaOapg.properties.keyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptedData"]) -> MetaOapg.properties.encryptedData: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expMonth"]) -> typing.Union['CardExpMonth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expYear"]) -> typing.Union['CardExpYear', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingDetails"]) -> typing.Union['UpdateBillingDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["keyId", "encryptedData", "expMonth", "expYear", "billingDetails", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        encryptedData: typing.Union[MetaOapg.properties.encryptedData, str, ],
        keyId: typing.Union[MetaOapg.properties.keyId, str, uuid.UUID, ],
        expMonth: typing.Union['CardExpMonth', schemas.Unset] = schemas.unset,
        expYear: typing.Union['CardExpYear', schemas.Unset] = schemas.unset,
        billingDetails: typing.Union['UpdateBillingDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardUpdate':
        return super().__new__(
            cls,
            *_args,
            encryptedData=encryptedData,
            keyId=keyId,
            expMonth=expMonth,
            expYear=expYear,
            billingDetails=billingDetails,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.card_exp_month import CardExpMonth
from circle.model.card_exp_year import CardExpYear
from circle.model.update_billing_details import UpdateBillingDetails
