# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class GooglePayToken(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "signature",
            "protocolVersion",
            "signedMessage",
        }
        
        class properties:
            signature = schemas.StrSchema
            protocolVersion = schemas.StrSchema
            signedMessage = schemas.StrSchema
            __annotations__ = {
                "signature": signature,
                "protocolVersion": protocolVersion,
                "signedMessage": signedMessage,
            }
    
    signature: MetaOapg.properties.signature
    protocolVersion: MetaOapg.properties.protocolVersion
    signedMessage: MetaOapg.properties.signedMessage
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocolVersion"]) -> MetaOapg.properties.protocolVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signedMessage"]) -> MetaOapg.properties.signedMessage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["signature", "protocolVersion", "signedMessage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocolVersion"]) -> MetaOapg.properties.protocolVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signedMessage"]) -> MetaOapg.properties.signedMessage: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["signature", "protocolVersion", "signedMessage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        signature: typing.Union[MetaOapg.properties.signature, str, ],
        protocolVersion: typing.Union[MetaOapg.properties.protocolVersion, str, ],
        signedMessage: typing.Union[MetaOapg.properties.signedMessage, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GooglePayToken':
        return super().__new__(
            cls,
            *_args,
            signature=signature,
            protocolVersion=protocolVersion,
            signedMessage=signedMessage,
            _configuration=_configuration,
            **kwargs,
        )
