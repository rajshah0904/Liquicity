# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class TransferErrorCode(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Indicates the failure reason of a transfer. Only present for transfers in a `failed` state. Possible values are `insufficient_funds`, `blockchain_error` and `transfer_denied` and `transfer_failed`
    """


    class MetaOapg:
        enum_value_to_name = {
            "transfer_failed": "TRANSFER_FAILED",
            "transfer_denied": "TRANSFER_DENIED",
            "blockchain_error": "BLOCKCHAIN_ERROR",
            "insufficient_funds": "INSUFFICIENT_FUNDS",
        }
    
    @schemas.classproperty
    def TRANSFER_FAILED(cls):
        return cls("transfer_failed")
    
    @schemas.classproperty
    def TRANSFER_DENIED(cls):
        return cls("transfer_denied")
    
    @schemas.classproperty
    def BLOCKCHAIN_ERROR(cls):
        return cls("blockchain_error")
    
    @schemas.classproperty
    def INSUFFICIENT_FUNDS(cls):
        return cls("insufficient_funds")


    def __new__(
        cls,
        *_args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TransferErrorCode':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
        )
