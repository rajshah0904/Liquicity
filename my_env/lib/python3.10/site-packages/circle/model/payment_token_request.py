# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class PaymentTokenRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "tokenData",
            "idempotencyKey",
            "type",
        }
        
        class properties:
            idempotencyKey = schemas.UUIDSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "applepay": "APPLEPAY",
                        "googlepay": "GOOGLEPAY",
                    }
                
                @schemas.classproperty
                def APPLEPAY(cls):
                    return cls("applepay")
                
                @schemas.classproperty
                def GOOGLEPAY(cls):
                    return cls("googlepay")
        
            @staticmethod
            def tokenData() -> typing.Type['PaymentTokenRequestTokenData']:
                return PaymentTokenRequestTokenData
            __annotations__ = {
                "idempotencyKey": idempotencyKey,
                "type": type,
                "tokenData": tokenData,
            }
    
    tokenData: 'PaymentTokenRequestTokenData'
    idempotencyKey: MetaOapg.properties.idempotencyKey
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenData"]) -> 'PaymentTokenRequestTokenData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "type", "tokenData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenData"]) -> 'PaymentTokenRequestTokenData': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "type", "tokenData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tokenData: 'PaymentTokenRequestTokenData',
        idempotencyKey: typing.Union[MetaOapg.properties.idempotencyKey, str, uuid.UUID, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentTokenRequest':
        return super().__new__(
            cls,
            *_args,
            tokenData=tokenData,
            idempotencyKey=idempotencyKey,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.payment_token_request_token_data import PaymentTokenRequestTokenData
