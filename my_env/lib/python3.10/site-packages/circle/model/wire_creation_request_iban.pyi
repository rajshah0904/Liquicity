# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class WireCreationRequestIban(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Relevant fields for non-U.S. bank accounts that support IBAN.
    """


    class MetaOapg:
        required = {
            "billingDetails",
            "idempotencyKey",
            "iban",
            "bankAddress",
        }
        
        class properties:
            idempotencyKey = schemas.UUIDSchema
            iban = schemas.StrSchema
        
            @staticmethod
            def billingDetails() -> typing.Type['BillingDetails']:
                return BillingDetails
        
            @staticmethod
            def bankAddress() -> typing.Type['BankAddressIbanSupported']:
                return BankAddressIbanSupported
            __annotations__ = {
                "idempotencyKey": idempotencyKey,
                "iban": iban,
                "billingDetails": billingDetails,
                "bankAddress": bankAddress,
            }
    
    billingDetails: 'BillingDetails'
    idempotencyKey: MetaOapg.properties.idempotencyKey
    iban: MetaOapg.properties.iban
    bankAddress: 'BankAddressIbanSupported'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iban"]) -> MetaOapg.properties.iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingDetails"]) -> 'BillingDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAddress"]) -> 'BankAddressIbanSupported': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "iban", "billingDetails", "bankAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iban"]) -> MetaOapg.properties.iban: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingDetails"]) -> 'BillingDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAddress"]) -> 'BankAddressIbanSupported': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "iban", "billingDetails", "bankAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        billingDetails: 'BillingDetails',
        idempotencyKey: typing.Union[MetaOapg.properties.idempotencyKey, str, uuid.UUID, ],
        iban: typing.Union[MetaOapg.properties.iban, str, ],
        bankAddress: 'BankAddressIbanSupported',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WireCreationRequestIban':
        return super().__new__(
            cls,
            *_args,
            billingDetails=billingDetails,
            idempotencyKey=idempotencyKey,
            iban=iban,
            bankAddress=bankAddress,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.bank_address_iban_supported import BankAddressIbanSupported
from circle.model.billing_details import BillingDetails
