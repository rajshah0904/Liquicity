# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class AddressBookRecipient(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "chain",
            "metadata",
            "address",
        }
        
        class properties:
        
            @staticmethod
            def chain() -> typing.Type['Chain']:
                return Chain
            address = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['AddressBookRecipientMetadata']:
                return AddressBookRecipientMetadata
            id = schemas.UUIDSchema
        
            @staticmethod
            def addressTag() -> typing.Type['AddressTag']:
                return AddressTag
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "pending": "PENDING",
                        "inactive": "INACTIVE",
                        "active": "ACTIVE",
                        "denied": "DENIED",
                    }
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def DENIED(cls):
                    return cls("denied")
            createDate = schemas.StrSchema
            updateDate = schemas.StrSchema
            __annotations__ = {
                "chain": chain,
                "address": address,
                "metadata": metadata,
                "id": id,
                "addressTag": addressTag,
                "status": status,
                "createDate": createDate,
                "updateDate": updateDate,
            }
    
    chain: 'Chain'
    metadata: 'AddressBookRecipientMetadata'
    address: MetaOapg.properties.address
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain"]) -> 'Chain': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'AddressBookRecipientMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressTag"]) -> 'AddressTag': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["chain", "address", "metadata", "id", "addressTag", "status", "createDate", "updateDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain"]) -> 'Chain': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'AddressBookRecipientMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressTag"]) -> typing.Union['AddressTag', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> typing.Union[MetaOapg.properties.updateDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chain", "address", "metadata", "id", "addressTag", "status", "createDate", "updateDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        chain: 'Chain',
        metadata: 'AddressBookRecipientMetadata',
        address: typing.Union[MetaOapg.properties.address, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        addressTag: typing.Union['AddressTag', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        createDate: typing.Union[MetaOapg.properties.createDate, str, schemas.Unset] = schemas.unset,
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddressBookRecipient':
        return super().__new__(
            cls,
            *_args,
            chain=chain,
            metadata=metadata,
            address=address,
            id=id,
            addressTag=addressTag,
            status=status,
            createDate=createDate,
            updateDate=updateDate,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.address_book_recipient_metadata import AddressBookRecipientMetadata
from circle.model.address_tag import AddressTag
from circle.model.chain import Chain
