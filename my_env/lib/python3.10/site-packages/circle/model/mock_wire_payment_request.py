# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class MockWirePaymentRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "beneficiaryBank",
            "trackingRef",
            "amount",
        }
        
        class properties:
            trackingRef = schemas.StrSchema
        
            @staticmethod
            def amount() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
        
            @staticmethod
            def beneficiaryBank() -> typing.Type['MockWirePaymentBeneficiaryBankInstruction']:
                return MockWirePaymentBeneficiaryBankInstruction
            __annotations__ = {
                "trackingRef": trackingRef,
                "amount": amount,
                "beneficiaryBank": beneficiaryBank,
            }
    
    beneficiaryBank: 'MockWirePaymentBeneficiaryBankInstruction'
    trackingRef: MetaOapg.properties.trackingRef
    amount: 'FiatMoneyUsd'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingRef"]) -> MetaOapg.properties.trackingRef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaryBank"]) -> 'MockWirePaymentBeneficiaryBankInstruction': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trackingRef", "amount", "beneficiaryBank", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingRef"]) -> MetaOapg.properties.trackingRef: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaryBank"]) -> 'MockWirePaymentBeneficiaryBankInstruction': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trackingRef", "amount", "beneficiaryBank", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        beneficiaryBank: 'MockWirePaymentBeneficiaryBankInstruction',
        trackingRef: typing.Union[MetaOapg.properties.trackingRef, str, ],
        amount: 'FiatMoneyUsd',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MockWirePaymentRequest':
        return super().__new__(
            cls,
            *_args,
            beneficiaryBank=beneficiaryBank,
            trackingRef=trackingRef,
            amount=amount,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.fiat_money_usd import FiatMoneyUsd
from circle.model.mock_wire_payment_beneficiary_bank_instruction import MockWirePaymentBeneficiaryBankInstruction
