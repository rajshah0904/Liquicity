# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class PresignDomain(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "chainId",
            "name",
            "version",
            "verifyingContract",
        }
        
        class properties:
            name = schemas.StrSchema
            verifyingContract = schemas.StrSchema
            version = schemas.StrSchema
            chainId = schemas.IntSchema
            __annotations__ = {
                "name": name,
                "verifyingContract": verifyingContract,
                "version": version,
                "chainId": chainId,
            }
    
    chainId: MetaOapg.properties.chainId
    name: MetaOapg.properties.name
    version: MetaOapg.properties.version
    verifyingContract: MetaOapg.properties.verifyingContract
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verifyingContract"]) -> MetaOapg.properties.verifyingContract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chainId"]) -> MetaOapg.properties.chainId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "verifyingContract", "version", "chainId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verifyingContract"]) -> MetaOapg.properties.verifyingContract: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chainId"]) -> MetaOapg.properties.chainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "verifyingContract", "version", "chainId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        chainId: typing.Union[MetaOapg.properties.chainId, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        verifyingContract: typing.Union[MetaOapg.properties.verifyingContract, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PresignDomain':
        return super().__new__(
            cls,
            *_args,
            chainId=chainId,
            name=name,
            version=version,
            verifyingContract=verifyingContract,
            _configuration=_configuration,
            **kwargs,
        )
