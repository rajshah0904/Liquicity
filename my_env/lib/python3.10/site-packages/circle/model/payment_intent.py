# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class PaymentIntent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "amount",
            "settlementCurrency",
            "paymentMethods",
        }
        
        class properties:
        
            @staticmethod
            def amount() -> typing.Type['CryptoPaymentsMoney']:
                return CryptoPaymentsMoney
            
            
            class settlementCurrency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "USD": "USD",
                        "BTC": "BTC",
                        "ETH": "ETH",
                    }
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
                
                @schemas.classproperty
                def BTC(cls):
                    return cls("BTC")
                
                @schemas.classproperty
                def ETH(cls):
                    return cls("ETH")
            
            
            class paymentMethods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentMethodBlockchain']:
                        return PaymentMethodBlockchain
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PaymentMethodBlockchain'], typing.List['PaymentMethodBlockchain']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymentMethods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentMethodBlockchain':
                    return super().__getitem__(i)
            id = schemas.UUIDSchema
        
            @staticmethod
            def amountPaid() -> typing.Type['CryptoPaymentsMoney']:
                return CryptoPaymentsMoney
        
            @staticmethod
            def amountRefunded() -> typing.Type['CryptoPaymentsMoney']:
                return CryptoPaymentsMoney
            
            
            class fees(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentIntentFees']:
                        return PaymentIntentFees
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PaymentIntentFees'], typing.List['PaymentIntentFees']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fees':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaymentIntentFees':
                    return super().__getitem__(i)
            
            
            class paymentIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymentIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class refundIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'refundIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class timeline(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Timeline']:
                        return Timeline
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Timeline'], typing.List['Timeline']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timeline':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Timeline':
                    return super().__getitem__(i)
            expiresOn = schemas.StrSchema
            updateDate = schemas.StrSchema
            createDate = schemas.StrSchema
        
            @staticmethod
            def merchantWalletId() -> typing.Type['MerchantWalletId']:
                return MerchantWalletId
            __annotations__ = {
                "amount": amount,
                "settlementCurrency": settlementCurrency,
                "paymentMethods": paymentMethods,
                "id": id,
                "amountPaid": amountPaid,
                "amountRefunded": amountRefunded,
                "fees": fees,
                "paymentIds": paymentIds,
                "refundIds": refundIds,
                "timeline": timeline,
                "expiresOn": expiresOn,
                "updateDate": updateDate,
                "createDate": createDate,
                "merchantWalletId": merchantWalletId,
            }
    
    amount: 'CryptoPaymentsMoney'
    settlementCurrency: MetaOapg.properties.settlementCurrency
    paymentMethods: MetaOapg.properties.paymentMethods
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'CryptoPaymentsMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settlementCurrency"]) -> MetaOapg.properties.settlementCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethods"]) -> MetaOapg.properties.paymentMethods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountPaid"]) -> 'CryptoPaymentsMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountRefunded"]) -> 'CryptoPaymentsMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentIds"]) -> MetaOapg.properties.paymentIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refundIds"]) -> MetaOapg.properties.refundIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeline"]) -> MetaOapg.properties.timeline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresOn"]) -> MetaOapg.properties.expiresOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantWalletId"]) -> 'MerchantWalletId': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "settlementCurrency", "paymentMethods", "id", "amountPaid", "amountRefunded", "fees", "paymentIds", "refundIds", "timeline", "expiresOn", "updateDate", "createDate", "merchantWalletId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'CryptoPaymentsMoney': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settlementCurrency"]) -> MetaOapg.properties.settlementCurrency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethods"]) -> MetaOapg.properties.paymentMethods: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountPaid"]) -> typing.Union['CryptoPaymentsMoney', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountRefunded"]) -> typing.Union['CryptoPaymentsMoney', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union[MetaOapg.properties.fees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentIds"]) -> typing.Union[MetaOapg.properties.paymentIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refundIds"]) -> typing.Union[MetaOapg.properties.refundIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeline"]) -> typing.Union[MetaOapg.properties.timeline, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresOn"]) -> typing.Union[MetaOapg.properties.expiresOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> typing.Union[MetaOapg.properties.updateDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantWalletId"]) -> typing.Union['MerchantWalletId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "settlementCurrency", "paymentMethods", "id", "amountPaid", "amountRefunded", "fees", "paymentIds", "refundIds", "timeline", "expiresOn", "updateDate", "createDate", "merchantWalletId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: 'CryptoPaymentsMoney',
        settlementCurrency: typing.Union[MetaOapg.properties.settlementCurrency, str, ],
        paymentMethods: typing.Union[MetaOapg.properties.paymentMethods, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        amountPaid: typing.Union['CryptoPaymentsMoney', schemas.Unset] = schemas.unset,
        amountRefunded: typing.Union['CryptoPaymentsMoney', schemas.Unset] = schemas.unset,
        fees: typing.Union[MetaOapg.properties.fees, list, tuple, schemas.Unset] = schemas.unset,
        paymentIds: typing.Union[MetaOapg.properties.paymentIds, list, tuple, schemas.Unset] = schemas.unset,
        refundIds: typing.Union[MetaOapg.properties.refundIds, list, tuple, schemas.Unset] = schemas.unset,
        timeline: typing.Union[MetaOapg.properties.timeline, list, tuple, schemas.Unset] = schemas.unset,
        expiresOn: typing.Union[MetaOapg.properties.expiresOn, str, schemas.Unset] = schemas.unset,
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, schemas.Unset] = schemas.unset,
        createDate: typing.Union[MetaOapg.properties.createDate, str, schemas.Unset] = schemas.unset,
        merchantWalletId: typing.Union['MerchantWalletId', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentIntent':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            settlementCurrency=settlementCurrency,
            paymentMethods=paymentMethods,
            id=id,
            amountPaid=amountPaid,
            amountRefunded=amountRefunded,
            fees=fees,
            paymentIds=paymentIds,
            refundIds=refundIds,
            timeline=timeline,
            expiresOn=expiresOn,
            updateDate=updateDate,
            createDate=createDate,
            merchantWalletId=merchantWalletId,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.crypto_payments_money import CryptoPaymentsMoney
from circle.model.merchant_wallet_id import MerchantWalletId
from circle.model.payment_intent_fees import PaymentIntentFees
from circle.model.payment_method_blockchain import PaymentMethodBlockchain
from circle.model.timeline import Timeline
