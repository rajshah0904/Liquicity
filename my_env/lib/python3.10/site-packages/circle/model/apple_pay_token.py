# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class ApplePayToken(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "data",
            "signature",
            "header",
            "version",
        }
        
        class properties:
            
            
            class version(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "EC_v1": "EC_V1",
                        "RSA_v1": "RSA_V1",
                    }
                
                @schemas.classproperty
                def EC_V1(cls):
                    return cls("EC_v1")
                
                @schemas.classproperty
                def RSA_V1(cls):
                    return cls("RSA_v1")
            data = schemas.StrSchema
            signature = schemas.StrSchema
        
            @staticmethod
            def header() -> typing.Type['ApplePayTokenHeader']:
                return ApplePayTokenHeader
            __annotations__ = {
                "version": version,
                "data": data,
                "signature": signature,
                "header": header,
            }
    
    data: MetaOapg.properties.data
    signature: MetaOapg.properties.signature
    header: 'ApplePayTokenHeader'
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header"]) -> 'ApplePayTokenHeader': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "data", "signature", "header", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header"]) -> 'ApplePayTokenHeader': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "data", "signature", "header", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, str, ],
        signature: typing.Union[MetaOapg.properties.signature, str, ],
        header: 'ApplePayTokenHeader',
        version: typing.Union[MetaOapg.properties.version, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplePayToken':
        return super().__new__(
            cls,
            *_args,
            data=data,
            signature=signature,
            header=header,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.apple_pay_token_header import ApplePayTokenHeader
