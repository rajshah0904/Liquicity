# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class ApplePayTokenEcHeader(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ephemeralPublicKey",
            "publicKeyHash",
            "transactionId",
        }
        
        class properties:
            ephemeralPublicKey = schemas.StrSchema
            publicKeyHash = schemas.StrSchema
            transactionId = schemas.StrSchema
            applicationData = schemas.StrSchema
            __annotations__ = {
                "ephemeralPublicKey": ephemeralPublicKey,
                "publicKeyHash": publicKeyHash,
                "transactionId": transactionId,
                "applicationData": applicationData,
            }
    
    ephemeralPublicKey: MetaOapg.properties.ephemeralPublicKey
    publicKeyHash: MetaOapg.properties.publicKeyHash
    transactionId: MetaOapg.properties.transactionId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ephemeralPublicKey"]) -> MetaOapg.properties.ephemeralPublicKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicKeyHash"]) -> MetaOapg.properties.publicKeyHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationData"]) -> MetaOapg.properties.applicationData: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ephemeralPublicKey", "publicKeyHash", "transactionId", "applicationData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ephemeralPublicKey"]) -> MetaOapg.properties.ephemeralPublicKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicKeyHash"]) -> MetaOapg.properties.publicKeyHash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationData"]) -> typing.Union[MetaOapg.properties.applicationData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ephemeralPublicKey", "publicKeyHash", "transactionId", "applicationData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ephemeralPublicKey: typing.Union[MetaOapg.properties.ephemeralPublicKey, str, ],
        publicKeyHash: typing.Union[MetaOapg.properties.publicKeyHash, str, ],
        transactionId: typing.Union[MetaOapg.properties.transactionId, str, ],
        applicationData: typing.Union[MetaOapg.properties.applicationData, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplePayTokenEcHeader':
        return super().__new__(
            cls,
            *_args,
            ephemeralPublicKey=ephemeralPublicKey,
            publicKeyHash=publicKeyHash,
            transactionId=transactionId,
            applicationData=applicationData,
            _configuration=_configuration,
            **kwargs,
        )
