# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class CryptoPayment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Status information of the related payment.
    """


    class MetaOapg:
        required = {
            "amount",
            "merchantId",
            "id",
            "type",
            "status",
        }
        
        class properties:
            id = schemas.UUIDSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "payment": "PAYMENT",
                        "refund": "REFUND",
                    }
                
                @schemas.classproperty
                def PAYMENT(cls):
                    return cls("payment")
                
                @schemas.classproperty
                def REFUND(cls):
                    return cls("refund")
            merchantId = schemas.UUIDSchema
        
            @staticmethod
            def amount() -> typing.Type['CryptoPaymentsOptionalAmountMoney']:
                return CryptoPaymentsOptionalAmountMoney
        
            @staticmethod
            def status() -> typing.Type['PaymentStatus']:
                return PaymentStatus
        
            @staticmethod
            def merchantWalletId() -> typing.Type['MerchantWalletId']:
                return MerchantWalletId
        
            @staticmethod
            def fees() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
        
            @staticmethod
            def networkFees() -> typing.Type['CryptoPaymentNetworkFee']:
                return CryptoPaymentNetworkFee
            paymentIntentId = schemas.UUIDSchema
        
            @staticmethod
            def settlementAmount() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
        
            @staticmethod
            def fromAddresses() -> typing.Type['CryptoPaymentFromAddresses']:
                return CryptoPaymentFromAddresses
        
            @staticmethod
            def depositAddress() -> typing.Type['CryptoPaymentDepositAddress']:
                return CryptoPaymentDepositAddress
            transactionHash = schemas.StrSchema
            createDate = schemas.StrSchema
            updateDate = schemas.StrSchema
        
            @staticmethod
            def riskEvaluation() -> typing.Type['RiskEvaluation']:
                return RiskEvaluation
            __annotations__ = {
                "id": id,
                "type": type,
                "merchantId": merchantId,
                "amount": amount,
                "status": status,
                "merchantWalletId": merchantWalletId,
                "fees": fees,
                "networkFees": networkFees,
                "paymentIntentId": paymentIntentId,
                "settlementAmount": settlementAmount,
                "fromAddresses": fromAddresses,
                "depositAddress": depositAddress,
                "transactionHash": transactionHash,
                "createDate": createDate,
                "updateDate": updateDate,
                "riskEvaluation": riskEvaluation,
            }
    
    amount: 'CryptoPaymentsOptionalAmountMoney'
    merchantId: MetaOapg.properties.merchantId
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    status: 'PaymentStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'CryptoPaymentsOptionalAmountMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'PaymentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantWalletId"]) -> 'MerchantWalletId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkFees"]) -> 'CryptoPaymentNetworkFee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentIntentId"]) -> MetaOapg.properties.paymentIntentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settlementAmount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromAddresses"]) -> 'CryptoPaymentFromAddresses': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depositAddress"]) -> 'CryptoPaymentDepositAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionHash"]) -> MetaOapg.properties.transactionHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskEvaluation"]) -> 'RiskEvaluation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "merchantId", "amount", "status", "merchantWalletId", "fees", "networkFees", "paymentIntentId", "settlementAmount", "fromAddresses", "depositAddress", "transactionHash", "createDate", "updateDate", "riskEvaluation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantId"]) -> MetaOapg.properties.merchantId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'CryptoPaymentsOptionalAmountMoney': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'PaymentStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantWalletId"]) -> typing.Union['MerchantWalletId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union['FiatMoneyUsd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkFees"]) -> typing.Union['CryptoPaymentNetworkFee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentIntentId"]) -> typing.Union[MetaOapg.properties.paymentIntentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settlementAmount"]) -> typing.Union['FiatMoneyUsd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromAddresses"]) -> typing.Union['CryptoPaymentFromAddresses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depositAddress"]) -> typing.Union['CryptoPaymentDepositAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionHash"]) -> typing.Union[MetaOapg.properties.transactionHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> typing.Union[MetaOapg.properties.updateDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskEvaluation"]) -> typing.Union['RiskEvaluation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "merchantId", "amount", "status", "merchantWalletId", "fees", "networkFees", "paymentIntentId", "settlementAmount", "fromAddresses", "depositAddress", "transactionHash", "createDate", "updateDate", "riskEvaluation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amount: 'CryptoPaymentsOptionalAmountMoney',
        merchantId: typing.Union[MetaOapg.properties.merchantId, str, uuid.UUID, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: 'PaymentStatus',
        merchantWalletId: typing.Union['MerchantWalletId', schemas.Unset] = schemas.unset,
        fees: typing.Union['FiatMoneyUsd', schemas.Unset] = schemas.unset,
        networkFees: typing.Union['CryptoPaymentNetworkFee', schemas.Unset] = schemas.unset,
        paymentIntentId: typing.Union[MetaOapg.properties.paymentIntentId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        settlementAmount: typing.Union['FiatMoneyUsd', schemas.Unset] = schemas.unset,
        fromAddresses: typing.Union['CryptoPaymentFromAddresses', schemas.Unset] = schemas.unset,
        depositAddress: typing.Union['CryptoPaymentDepositAddress', schemas.Unset] = schemas.unset,
        transactionHash: typing.Union[MetaOapg.properties.transactionHash, str, schemas.Unset] = schemas.unset,
        createDate: typing.Union[MetaOapg.properties.createDate, str, schemas.Unset] = schemas.unset,
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, schemas.Unset] = schemas.unset,
        riskEvaluation: typing.Union['RiskEvaluation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CryptoPayment':
        return super().__new__(
            cls,
            *_args,
            amount=amount,
            merchantId=merchantId,
            id=id,
            type=type,
            status=status,
            merchantWalletId=merchantWalletId,
            fees=fees,
            networkFees=networkFees,
            paymentIntentId=paymentIntentId,
            settlementAmount=settlementAmount,
            fromAddresses=fromAddresses,
            depositAddress=depositAddress,
            transactionHash=transactionHash,
            createDate=createDate,
            updateDate=updateDate,
            riskEvaluation=riskEvaluation,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.crypto_payment_deposit_address import CryptoPaymentDepositAddress
from circle.model.crypto_payment_from_addresses import CryptoPaymentFromAddresses
from circle.model.crypto_payment_network_fee import CryptoPaymentNetworkFee
from circle.model.crypto_payments_optional_amount_money import CryptoPaymentsOptionalAmountMoney
from circle.model.fiat_money_usd import FiatMoneyUsd
from circle.model.merchant_wallet_id import MerchantWalletId
from circle.model.payment_status import PaymentStatus
from circle.model.risk_evaluation import RiskEvaluation
