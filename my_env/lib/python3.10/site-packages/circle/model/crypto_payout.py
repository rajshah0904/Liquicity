# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class CryptoPayout(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            sourceWalletId = schemas.StrSchema
        
            @staticmethod
            def destination() -> typing.Type['CryptoPayoutDestination']:
                return CryptoPayoutDestination
        
            @staticmethod
            def amount() -> typing.Type['PayoutMoney']:
                return PayoutMoney
        
            @staticmethod
            def toAmount() -> typing.Type['PayoutMoney']:
                return PayoutMoney
        
            @staticmethod
            def fees() -> typing.Type['PayoutMoney']:
                return PayoutMoney
        
            @staticmethod
            def networkFees() -> typing.Type['PayoutMoney']:
                return PayoutMoney
        
            @staticmethod
            def status() -> typing.Type['PayoutStatus']:
                return PayoutStatus
        
            @staticmethod
            def errorCode() -> typing.Type['PayoutErrorCode']:
                return PayoutErrorCode
        
            @staticmethod
            def riskEvaluation() -> typing.Type['RiskEvaluation']:
                return RiskEvaluation
            createDate = schemas.StrSchema
            updateDate = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "sourceWalletId": sourceWalletId,
                "destination": destination,
                "amount": amount,
                "toAmount": toAmount,
                "fees": fees,
                "networkFees": networkFees,
                "status": status,
                "errorCode": errorCode,
                "riskEvaluation": riskEvaluation,
                "createDate": createDate,
                "updateDate": updateDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceWalletId"]) -> MetaOapg.properties.sourceWalletId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'CryptoPayoutDestination': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'PayoutMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toAmount"]) -> 'PayoutMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> 'PayoutMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networkFees"]) -> 'PayoutMoney': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'PayoutStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> 'PayoutErrorCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskEvaluation"]) -> 'RiskEvaluation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sourceWalletId", "destination", "amount", "toAmount", "fees", "networkFees", "status", "errorCode", "riskEvaluation", "createDate", "updateDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceWalletId"]) -> typing.Union[MetaOapg.properties.sourceWalletId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> typing.Union['CryptoPayoutDestination', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union['PayoutMoney', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toAmount"]) -> typing.Union['PayoutMoney', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union['PayoutMoney', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networkFees"]) -> typing.Union['PayoutMoney', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['PayoutStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union['PayoutErrorCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskEvaluation"]) -> typing.Union['RiskEvaluation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> typing.Union[MetaOapg.properties.updateDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sourceWalletId", "destination", "amount", "toAmount", "fees", "networkFees", "status", "errorCode", "riskEvaluation", "createDate", "updateDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        sourceWalletId: typing.Union[MetaOapg.properties.sourceWalletId, str, schemas.Unset] = schemas.unset,
        destination: typing.Union['CryptoPayoutDestination', schemas.Unset] = schemas.unset,
        amount: typing.Union['PayoutMoney', schemas.Unset] = schemas.unset,
        toAmount: typing.Union['PayoutMoney', schemas.Unset] = schemas.unset,
        fees: typing.Union['PayoutMoney', schemas.Unset] = schemas.unset,
        networkFees: typing.Union['PayoutMoney', schemas.Unset] = schemas.unset,
        status: typing.Union['PayoutStatus', schemas.Unset] = schemas.unset,
        errorCode: typing.Union['PayoutErrorCode', schemas.Unset] = schemas.unset,
        riskEvaluation: typing.Union['RiskEvaluation', schemas.Unset] = schemas.unset,
        createDate: typing.Union[MetaOapg.properties.createDate, str, schemas.Unset] = schemas.unset,
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CryptoPayout':
        return super().__new__(
            cls,
            *_args,
            id=id,
            sourceWalletId=sourceWalletId,
            destination=destination,
            amount=amount,
            toAmount=toAmount,
            fees=fees,
            networkFees=networkFees,
            status=status,
            errorCode=errorCode,
            riskEvaluation=riskEvaluation,
            createDate=createDate,
            updateDate=updateDate,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.crypto_payout_destination import CryptoPayoutDestination
from circle.model.payout_error_code import PayoutErrorCode
from circle.model.payout_money import PayoutMoney
from circle.model.payout_status import PayoutStatus
from circle.model.risk_evaluation import RiskEvaluation
