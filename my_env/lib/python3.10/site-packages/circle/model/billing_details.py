# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class BillingDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "country",
            "city",
            "postalCode",
            "name",
            "line1",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class city(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class country(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2
            
            
            class line1(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class postalCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 16
            
            
            class line2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1024
            
            
            class district(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 16
            __annotations__ = {
                "name": name,
                "city": city,
                "country": country,
                "line1": line1,
                "postalCode": postalCode,
                "line2": line2,
                "district": district,
            }
    
    country: MetaOapg.properties.country
    city: MetaOapg.properties.city
    postalCode: MetaOapg.properties.postalCode
    name: MetaOapg.properties.name
    line1: MetaOapg.properties.line1
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line1"]) -> MetaOapg.properties.line1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line2"]) -> MetaOapg.properties.line2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "city", "country", "line1", "postalCode", "line2", "district", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line1"]) -> MetaOapg.properties.line1: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line2"]) -> typing.Union[MetaOapg.properties.line2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["district"]) -> typing.Union[MetaOapg.properties.district, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "city", "country", "line1", "postalCode", "line2", "district", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        city: typing.Union[MetaOapg.properties.city, str, ],
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        line1: typing.Union[MetaOapg.properties.line1, str, ],
        line2: typing.Union[MetaOapg.properties.line2, str, schemas.Unset] = schemas.unset,
        district: typing.Union[MetaOapg.properties.district, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BillingDetails':
        return super().__new__(
            cls,
            *_args,
            country=country,
            city=city,
            postalCode=postalCode,
            name=name,
            line1=line1,
            line2=line2,
            district=district,
            _configuration=_configuration,
            **kwargs,
        )
