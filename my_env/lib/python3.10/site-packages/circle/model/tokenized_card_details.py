# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class TokenizedCardDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "expMonth",
            "last4",
            "expYear",
            "bin",
        }
        
        class properties:
            expMonth = schemas.IntSchema
            expYear = schemas.IntSchema
            last4 = schemas.StrSchema
            bin = schemas.StrSchema
            
            
            class network(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "VISA": "VISA",
                        "MASTERCARD": "MASTERCARD",
                        "AMEX": "AMEX",
                        "UNKNOWN": "UNKNOWN",
                    }
                
                @schemas.classproperty
                def VISA(cls):
                    return cls("VISA")
                
                @schemas.classproperty
                def MASTERCARD(cls):
                    return cls("MASTERCARD")
                
                @schemas.classproperty
                def AMEX(cls):
                    return cls("AMEX")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("UNKNOWN")
            
            
            class fundingType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "credit": "CREDIT",
                        "debit": "DEBIT",
                        "prepaid": "PREPAID",
                        "unknown": "UNKNOWN",
                    }
                
                @schemas.classproperty
                def CREDIT(cls):
                    return cls("credit")
                
                @schemas.classproperty
                def DEBIT(cls):
                    return cls("debit")
                
                @schemas.classproperty
                def PREPAID(cls):
                    return cls("prepaid")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("unknown")
            issuerCountry = schemas.StrSchema
            __annotations__ = {
                "expMonth": expMonth,
                "expYear": expYear,
                "last4": last4,
                "bin": bin,
                "network": network,
                "fundingType": fundingType,
                "issuerCountry": issuerCountry,
            }
    
    expMonth: MetaOapg.properties.expMonth
    last4: MetaOapg.properties.last4
    expYear: MetaOapg.properties.expYear
    bin: MetaOapg.properties.bin
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expMonth"]) -> MetaOapg.properties.expMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expYear"]) -> MetaOapg.properties.expYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last4"]) -> MetaOapg.properties.last4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin"]) -> MetaOapg.properties.bin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fundingType"]) -> MetaOapg.properties.fundingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuerCountry"]) -> MetaOapg.properties.issuerCountry: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expMonth", "expYear", "last4", "bin", "network", "fundingType", "issuerCountry", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expMonth"]) -> MetaOapg.properties.expMonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expYear"]) -> MetaOapg.properties.expYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last4"]) -> MetaOapg.properties.last4: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin"]) -> MetaOapg.properties.bin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> typing.Union[MetaOapg.properties.network, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fundingType"]) -> typing.Union[MetaOapg.properties.fundingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuerCountry"]) -> typing.Union[MetaOapg.properties.issuerCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expMonth", "expYear", "last4", "bin", "network", "fundingType", "issuerCountry", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        expMonth: typing.Union[MetaOapg.properties.expMonth, decimal.Decimal, int, ],
        last4: typing.Union[MetaOapg.properties.last4, str, ],
        expYear: typing.Union[MetaOapg.properties.expYear, decimal.Decimal, int, ],
        bin: typing.Union[MetaOapg.properties.bin, str, ],
        network: typing.Union[MetaOapg.properties.network, str, schemas.Unset] = schemas.unset,
        fundingType: typing.Union[MetaOapg.properties.fundingType, str, schemas.Unset] = schemas.unset,
        issuerCountry: typing.Union[MetaOapg.properties.issuerCountry, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenizedCardDetails':
        return super().__new__(
            cls,
            *_args,
            expMonth=expMonth,
            last4=last4,
            expYear=expYear,
            bin=bin,
            network=network,
            fundingType=fundingType,
            issuerCountry=issuerCountry,
            _configuration=_configuration,
            **kwargs,
        )
