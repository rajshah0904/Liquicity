# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from circle import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401

from circle.model.payout_destination_type import PayoutDestinationType
from circle.model.not_authorized import NotAuthorized
from circle.model.payout_status import PayoutStatus
from circle.model.list_payouts_response import ListPayoutsResponse

from . import path

# Query params
SourceSchema = schemas.StrSchema
DestinationSchema = schemas.UUIDSchema


class TypeSchema(
    schemas.ListSchema
):


    class MetaOapg:
        unique_items = True
        
        @staticmethod
        def items() -> typing.Type['PayoutDestinationType']:
            return PayoutDestinationType

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['PayoutDestinationType'], typing.List['PayoutDestinationType']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TypeSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'PayoutDestinationType':
        return super().__getitem__(i)


class StatusSchema(
    schemas.ListSchema
):


    class MetaOapg:
        unique_items = True
        
        @staticmethod
        def items() -> typing.Type['PayoutStatus']:
            return PayoutStatus

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['PayoutStatus'], typing.List['PayoutStatus']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StatusSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'PayoutStatus':
        return super().__getitem__(i)


class SourceCurrencySchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "USD": "USD",
            "EUR": "EUR",
            "BTC": "BTC",
            "ETH": "ETH",
            "MTC": "MTC",
            "FLW": "FLW",
            "MAN": "MAN",
        }
    
    @schemas.classproperty
    def USD(cls):
        return cls("USD")
    
    @schemas.classproperty
    def EUR(cls):
        return cls("EUR")
    
    @schemas.classproperty
    def BTC(cls):
        return cls("BTC")
    
    @schemas.classproperty
    def ETH(cls):
        return cls("ETH")
    
    @schemas.classproperty
    def MTC(cls):
        return cls("MTC")
    
    @schemas.classproperty
    def FLW(cls):
        return cls("FLW")
    
    @schemas.classproperty
    def MAN(cls):
        return cls("MAN")


class DestinationCurrencySchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "USD": "USD",
            "EUR": "EUR",
            "BTC": "BTC",
            "ETH": "ETH",
            "MTC": "MTC",
            "FLW": "FLW",
            "MAN": "MAN",
        }
    
    @schemas.classproperty
    def USD(cls):
        return cls("USD")
    
    @schemas.classproperty
    def EUR(cls):
        return cls("EUR")
    
    @schemas.classproperty
    def BTC(cls):
        return cls("BTC")
    
    @schemas.classproperty
    def ETH(cls):
        return cls("ETH")
    
    @schemas.classproperty
    def MTC(cls):
        return cls("MTC")
    
    @schemas.classproperty
    def FLW(cls):
        return cls("FLW")
    
    @schemas.classproperty
    def MAN(cls):
        return cls("MAN")


class ChainSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "ALGO": "ALGO",
            "ARB": "ARB",
            "AVAX": "AVAX",
            "BASE": "BASE",
            "BTC": "BTC",
            "CELO": "CELO",
            "ETH": "ETH",
            "FLOW": "FLOW",
            "HBAR": "HBAR",
            "NEAR": "NEAR",
            "NOBLE": "NOBLE",
            "OP": "OP",
            "PAH": "PAH",
            "POLY": "POLY",
            "SOL": "SOL",
            "TRX": "TRX",
            "XLM": "XLM",
        }
    
    @schemas.classproperty
    def ALGO(cls):
        return cls("ALGO")
    
    @schemas.classproperty
    def ARB(cls):
        return cls("ARB")
    
    @schemas.classproperty
    def AVAX(cls):
        return cls("AVAX")
    
    @schemas.classproperty
    def BASE(cls):
        return cls("BASE")
    
    @schemas.classproperty
    def BTC(cls):
        return cls("BTC")
    
    @schemas.classproperty
    def CELO(cls):
        return cls("CELO")
    
    @schemas.classproperty
    def ETH(cls):
        return cls("ETH")
    
    @schemas.classproperty
    def FLOW(cls):
        return cls("FLOW")
    
    @schemas.classproperty
    def HBAR(cls):
        return cls("HBAR")
    
    @schemas.classproperty
    def NEAR(cls):
        return cls("NEAR")
    
    @schemas.classproperty
    def NOBLE(cls):
        return cls("NOBLE")
    
    @schemas.classproperty
    def OP(cls):
        return cls("OP")
    
    @schemas.classproperty
    def PAH(cls):
        return cls("PAH")
    
    @schemas.classproperty
    def POLY(cls):
        return cls("POLY")
    
    @schemas.classproperty
    def SOL(cls):
        return cls("SOL")
    
    @schemas.classproperty
    def TRX(cls):
        return cls("TRX")
    
    @schemas.classproperty
    def XLM(cls):
        return cls("XLM")
ModelFromSchema = schemas.DateTimeSchema
ToSchema = schemas.DateTimeSchema
PageBeforeSchema = schemas.StrSchema
PageAfterSchema = schemas.StrSchema


class PageSizeSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_minimum = 1
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'source': typing.Union[SourceSchema, str, ],
        'destination': typing.Union[DestinationSchema, str, uuid.UUID, ],
        'type': typing.Union[TypeSchema, list, tuple, ],
        'status': typing.Union[StatusSchema, list, tuple, ],
        'sourceCurrency': typing.Union[SourceCurrencySchema, str, ],
        'destinationCurrency': typing.Union[DestinationCurrencySchema, str, ],
        'chain': typing.Union[ChainSchema, str, ],
        'from': typing.Union[ModelFromSchema, str, datetime, ],
        'to': typing.Union[ToSchema, str, datetime, ],
        'pageBefore': typing.Union[PageBeforeSchema, str, ],
        'pageAfter': typing.Union[PageAfterSchema, str, ],
        'pageSize': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_source = api_client.QueryParameter(
    name="source",
    style=api_client.ParameterStyle.FORM,
    schema=SourceSchema,
    explode=True,
)
request_query_destination = api_client.QueryParameter(
    name="destination",
    style=api_client.ParameterStyle.FORM,
    schema=DestinationSchema,
    explode=True,
)
request_query_type = api_client.QueryParameter(
    name="type",
    style=api_client.ParameterStyle.FORM,
    schema=TypeSchema,
    explode=True,
)
request_query_status = api_client.QueryParameter(
    name="status",
    style=api_client.ParameterStyle.FORM,
    schema=StatusSchema,
    explode=True,
)
request_query_source_currency = api_client.QueryParameter(
    name="sourceCurrency",
    style=api_client.ParameterStyle.FORM,
    schema=SourceCurrencySchema,
    explode=True,
)
request_query_destination_currency = api_client.QueryParameter(
    name="destinationCurrency",
    style=api_client.ParameterStyle.FORM,
    schema=DestinationCurrencySchema,
    explode=True,
)
request_query_chain = api_client.QueryParameter(
    name="chain",
    style=api_client.ParameterStyle.FORM,
    schema=ChainSchema,
    explode=True,
)
request_query__from = api_client.QueryParameter(
    name="from",
    style=api_client.ParameterStyle.FORM,
    schema=ModelFromSchema,
    explode=True,
)
request_query_to = api_client.QueryParameter(
    name="to",
    style=api_client.ParameterStyle.FORM,
    schema=ToSchema,
    explode=True,
)
request_query_page_before = api_client.QueryParameter(
    name="pageBefore",
    style=api_client.ParameterStyle.FORM,
    schema=PageBeforeSchema,
    explode=True,
)
request_query_page_after = api_client.QueryParameter(
    name="pageAfter",
    style=api_client.ParameterStyle.FORM,
    schema=PageAfterSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
_auth = [
    'bearerAuth',
]
XRequestIdSchema = schemas.UUIDSchema
x_request_id_parameter = api_client.HeaderParameter(
    name="X-Request-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRequestIdSchema,
)
SchemaFor200ResponseBodyApplicationJson = ListPayoutsResponse
ResponseHeadersFor200 = typing_extensions.TypedDict(
    'ResponseHeadersFor200',
    {
        'X-Request-Id': XRequestIdSchema,
    }
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor200


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
    headers=[
        x_request_id_parameter,
    ]
)
XRequestIdSchema = schemas.UUIDSchema
x_request_id_parameter = api_client.HeaderParameter(
    name="X-Request-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XRequestIdSchema,
)
SchemaFor401ResponseBodyApplicationJson = NotAuthorized
ResponseHeadersFor401 = typing_extensions.TypedDict(
    'ResponseHeadersFor401',
    {
        'X-Request-Id': XRequestIdSchema,
    }
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: ResponseHeadersFor401


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
    headers=[
        x_request_id_parameter,
    ]
)
_status_code_to_response = {
    '200': _response_for_200,
    '401': _response_for_401,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_payouts_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_payouts_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_payouts_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_payouts_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        List all payouts
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_source,
            request_query_destination,
            request_query_type,
            request_query_status,
            request_query_source_currency,
            request_query_destination_currency,
            request_query_chain,
            request_query__from,
            request_query_to,
            request_query_page_before,
            request_query_page_after,
            request_query_page_size,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ListPayouts(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_payouts(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_payouts(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_payouts(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_payouts(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_payouts_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_payouts_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


