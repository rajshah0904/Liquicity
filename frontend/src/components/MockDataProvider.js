import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth0 } from '@auth0/auth0-react';
import { walletAPI, authAPI, transferAPI } from '../utils/api';

// Create a context for mock data
const MockDataContext = createContext();

// Synchronous version (localStorage only)
const getUserBalancesSync = () => {
Â Â const storedBalances = localStorage.getItem('mockUserBalances');
Â Â if (storedBalances) {
Â Â Â Â return JSON.parse(storedBalances);
Â Â }
Â Â return getInitialBalances();
};

// Get notifications from localStorage
const getNotificationsSync = () => {
Â Â const storedNotifications = localStorage.getItem('mockNotifications');
Â Â if (storedNotifications) {
Â Â Â Â return JSON.parse(storedNotifications);
Â Â }
Â Â return [];
};

// Save notifications to localStorage
const saveNotifications = (notifications) => {
Â Â localStorage.setItem('mockNotifications', JSON.stringify(notifications));
Â Â return notifications;
};

// Add a new notification
const addNotification = (notification) => {
Â Â const notifications = getNotificationsSync();
Â Â notifications.unshift(notification); // Add to beginning of array
Â Â saveNotifications(notifications.slice(0, 100)); // Keep only last 100
Â Â return notifications;
};

// Async version attempts backend first
const fetchUserBalances = async () => {
Â Â try {
Â Â Â Â // Try to get balances from backend API
Â Â Â Â const response = await fetch('/mock/wallet/balances');
Â Â Â Â if (response.ok) {
Â Â Â Â Â Â const contentType = response.headers.get('content-type') || '';
Â Â Â Â Â Â if (contentType.includes('application/json')) {
Â Â Â Â Â Â Â Â const data = await response.json();
Â Â Â Â Â Â Â Â console.log("Retrieved balances from backend API:", data);
Â Â Â Â Â Â Â Â return data;
Â Â Â Â Â Â }
Â Â Â Â Â Â console.warn('Balances API did not return JSON, falling back to localStorage');
Â Â Â Â } else {
Â Â Â Â Â Â console.error("Failed to fetch balances from API:", response.statusText);
Â Â Â Â }
Â Â } catch (error) {
Â Â Â Â console.error("Error fetching balances from API:", error);
Â Â }
Â Â 
Â Â // Fallback to localStorage if API call fails
Â Â return getUserBalancesSync();
};

// Initial balances to use when nothing in localStorage or backend
const getInitialBalances = () => {
Â Â return {
Â Â Â Â 'user@example.com': { usd: 5000.00, eur: 0 },
Â Â Â Â 'rajshah11@gmail.com': { usd: 5000.00, eur: 0 },
Â Â Â Â 'hadeermotair@gmail.com': { usd: 0, eur: 0 }
Â Â };
};

// Force reset balances to ensure everyone has money
const forceResetBalances = async () => {
Â Â const initialBalances = getInitialBalances();
Â Â 
Â Â // Save to localStorage as fallback
Â Â localStorage.setItem('mockUserBalances', JSON.stringify(initialBalances));
Â Â 
Â Â // Try to update balances on the backend
Â Â try {
Â Â Â Â for (const [email, balance] of Object.entries(initialBalances)) {
Â Â Â Â Â Â await fetch(`/mock/wallet/balances/${email}`, {
Â Â Â Â Â Â Â Â method: 'POST',
Â Â Â Â Â Â Â Â headers: {
Â Â Â Â Â Â Â Â Â Â 'Content-Type': 'application/json',
Â Â Â Â Â Â Â Â },
Â Â Â Â Â Â Â Â body: JSON.stringify(balance),
Â Â Â Â Â Â });
Â Â Â Â }
Â Â Â Â console.log("ðŸ’° Forced balance reset with new money via backend API!");
Â Â } catch (error) {
Â Â Â Â console.error("Error resetting balances via API:", error);
Â Â }
Â Â 
Â Â return initialBalances;
};

// Exchange rate for USD to EUR
const USD_TO_EUR_RATE = 0.85;
const EUR_TO_USD_RATE = 1 / USD_TO_EUR_RATE;

// Currency conversion fee (2%)
const CURRENCY_CONVERSION_FEE = 0.02;

// Format currency based on user preference
const formatCurrency = (amount, currency, userCurrency = null) => {
Â Â if (!amount && amount !== 0) return '0.00';
Â Â 
Â Â // Convert if currencies don't match
Â Â let convertedAmount = amount;
Â Â let displayCurrency = currency;
Â Â 
Â Â if (userCurrency && userCurrency.toLowerCase() !== currency.toLowerCase()) {
Â Â Â Â if (currency.toLowerCase() === 'usd' && userCurrency.toLowerCase() === 'eur') {
Â Â Â Â Â Â convertedAmount = amount * USD_TO_EUR_RATE;
Â Â Â Â Â Â displayCurrency = 'EUR';
Â Â Â Â } else if (currency.toLowerCase() === 'eur' && userCurrency.toLowerCase() === 'usd') {
Â Â Â Â Â Â convertedAmount = amount * EUR_TO_USD_RATE;
Â Â Â Â Â Â displayCurrency = 'USD';
Â Â Â Â }
Â Â }
Â Â 
Â Â // Format with 2 decimal places
Â Â return `${displayCurrency === 'EUR' ? 'â‚¬' : '$'}${Math.abs(convertedAmount).toFixed(2)}`;
};

// Generate wallet data based on user balances
const generateWallets = (email, balancesObj) => {
Â Â const balances = balancesObj || getUserBalancesSync(); // Always get from sync to ensure consistency
Â Â const userBalance = balances[email] || { usd: 0, eur: 0 };
Â Â 
Â Â // For Hadeer, we want to show only EUR wallet
Â Â if (email === 'hadeermotair@gmail.com') {
Â Â Â Â return [
Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â wallet_id: 'w-eur-' + email,
Â Â Â Â Â Â Â Â currency: 'eur',
Â Â Â Â Â Â Â Â balance: userBalance.eur,
Â Â Â Â Â Â Â Â local_currency: 'eur',
Â Â Â Â Â Â Â Â local_balance: userBalance.eur,
Â Â Â Â Â Â Â Â created_at: '2023-06-15T14:23:45Z',
Â Â Â Â Â Â Â Â status: 'active'
Â Â Â Â Â Â }
Â Â Â Â ];
Â Â }
Â Â 
Â Â // For other users, show both USD and EUR wallets
Â Â return [
Â Â Â Â {
Â Â Â Â Â Â wallet_id: 'w-usd-' + email,
Â Â Â Â Â Â currency: 'usd',
Â Â Â Â Â Â balance: userBalance.usd,
Â Â Â Â Â Â local_currency: 'usd',
Â Â Â Â Â Â local_balance: userBalance.usd,
Â Â Â Â Â Â created_at: '2023-06-15T14:23:45Z',
Â Â Â Â Â Â status: 'active'
Â Â Â Â },
Â Â Â Â {
Â Â Â Â Â Â wallet_id: 'w-eur-' + email,
Â Â Â Â Â Â currency: 'eur',
Â Â Â Â Â Â balance: userBalance.eur,
Â Â Â Â Â Â local_currency: 'usd',
Â Â Â Â Â Â local_balance: userBalance.eur * (1/USD_TO_EUR_RATE), // Convert EUR to USD for local display
Â Â Â Â Â Â created_at: '2023-06-15T14:23:45Z',
Â Â Â Â Â Â status: 'active'
Â Â Â Â }
Â Â ];
};

// Generate transaction history based on stored transactions
const getTransactionHistory = () => {
Â Â const storedTransactions = localStorage.getItem('mockTransactions');
Â Â if (storedTransactions) {
Â Â Â Â return JSON.parse(storedTransactions);
Â Â }
Â Â 
Â Â // Default empty transactions if none in localStorage
Â Â return [];
};

// Save a new transaction and update balances
const saveTransaction = (transaction, userEmail) => {
Â Â // Save the transaction
Â Â const transactions = getTransactionHistory();
Â Â transactions.unshift(transaction);
Â Â localStorage.setItem('mockTransactions', JSON.stringify(transactions.slice(0, 100))); // Keep only last 100
Â Â 
Â Â // Update balances
Â Â const balances = getUserBalancesSync();
Â Â localStorage.setItem('mockUserBalances', JSON.stringify(balances));
Â Â 
Â Â return transaction;
};

// Get user's preferred currency
const getUserPreferredCurrency = (email) => {
Â Â // Default preferences
Â Â if (email === 'hadeermotair@gmail.com') {
Â Â Â Â return 'EUR';
Â Â }
Â Â return 'USD';
};

// Recalculate all balances from transaction history
// This ensures consistent state between transactions and balances
const recalculateBalancesFromTransactions = () => {
Â Â const transactions = getTransactionHistory();
Â Â const balances = getInitialBalances(); // Start with initial balances
Â Â 
Â Â // Process each transaction to update balances
Â Â transactions.forEach(transaction => {
Â Â Â Â const email = transaction.user_email;
Â Â Â Â if (!balances[email]) {
Â Â Â Â Â Â balances[email] = { usd: 0, eur: 0 };
Â Â Â Â }
Â Â Â Â 
Â Â Â Â // Update the balance based on transaction type and currency
Â Â Â Â if (transaction.type === 'SEND') {
Â Â Â Â Â Â // For send transactions, amount is already negative
Â Â Â Â Â Â if (transaction.currency.toLowerCase() === 'usd') {
Â Â Â Â Â Â Â Â balances[email].usd += transaction.amount;
Â Â Â Â Â Â } else if (transaction.currency.toLowerCase() === 'eur') {
Â Â Â Â Â Â Â Â balances[email].eur += transaction.amount;
Â Â Â Â Â Â }
Â Â Â Â } else if (transaction.type === 'RECEIVE') {
Â Â Â Â Â Â // For receive transactions, amount is positive
Â Â Â Â Â Â if (transaction.currency.toLowerCase() === 'usd') {
Â Â Â Â Â Â Â Â balances[email].usd += transaction.amount;
Â Â Â Â Â Â } else if (transaction.currency.toLowerCase() === 'eur') {
Â Â Â Â Â Â Â Â balances[email].eur += transaction.amount;
Â Â Â Â Â Â }
Â Â Â Â }
Â Â });
Â Â 
Â Â // Save recalculated balances
Â Â localStorage.setItem('mockUserBalances', JSON.stringify(balances));
Â Â console.log('Recalculated balances from transactions:', balances);
Â Â 
Â Â return balances;
};

// Mock data provider component
export const MockDataProvider = ({ children }) => {
Â Â // Update balances when the app loads
Â Â useEffect(() => {
Â Â Â Â // Always recalculate balances from transactions to ensure consistency
Â Â Â Â const recalculatedBalances = recalculateBalancesFromTransactions();
Â Â Â Â setBalances(recalculatedBalances);
Â Â Â Â 
Â Â Â Â // Patch walletAPI and other APIs to use mock versions
Â Â Â Â walletAPI.getOverview = mockAPI.walletAPI.getOverview;
Â Â Â Â walletAPI.getAllTransactions = mockAPI.walletAPI.getAllTransactions;
Â Â Â Â transferAPI.send = mockAPI.transferAPI.send;
Â Â Â Â authAPI.searchUsers = mockAPI.authAPI.searchUsers;
Â Â Â Â 
Â Â Â Â // Add notification API if it doesn't exist
Â Â Â Â if (!walletAPI.getNotifications) {
Â Â Â Â Â Â walletAPI.getNotifications = mockAPI.walletAPI.getNotifications;
Â Â Â Â Â Â walletAPI.markNotificationRead = mockAPI.walletAPI.markNotificationRead;
Â Â Â Â Â Â walletAPI.markAllNotificationsRead = mockAPI.walletAPI.markAllNotificationsRead;
Â Â Â Â }
Â Â Â Â 
Â Â Â Â // Debug current state
Â Â Â Â console.log('Initial transactions:', getTransactionHistory());
Â Â Â Â console.log('Initial balances:', recalculatedBalances);
Â Â Â Â console.log('Initial notifications:', getNotificationsSync());
Â Â }, []);

Â Â const [balances, setBalances] = useState(getUserBalancesSync());
Â Â const [transactions, setTransactions] = useState(getTransactionHistory());
Â Â const [notifications, setNotifications] = useState(getNotificationsSync());
Â Â const [user, setUser] = useState({
Â Â Â Â id: 'u-001',
Â Â Â Â email: 'user@example.com',
Â Â Â Â first_name: 'Raj',
Â Â Â Â last_name: 'Shah',
Â Â Â Â username: 'rajshah',
Â Â Â Â nickname: 'Raj',
Â Â Â Â profile: {
Â Â Â Â Â Â avatar_url: null,
Â Â Â Â Â Â country: 'US',
Â Â Â Â Â Â currency: 'USD'
Â Â Â Â }
Â Â });
Â Â 
Â Â // Sync Auth0 user when authenticated
Â Â const { user: authUser, isAuthenticated } = useAuth0();
Â Â useEffect(() => {
Â Â Â Â if (isAuthenticated && authUser && authUser.email) {
Â Â Â Â Â Â const userEmail = authUser.email;
Â Â Â Â Â Â 
Â Â Â Â Â Â // When user changes, ensure their balances are up-to-date
Â Â Â Â Â Â const currentBalances = getUserBalancesSync();
Â Â Â Â Â Â if (!currentBalances[userEmail]) {
Â Â Â Â Â Â Â Â // Initialize if user doesn't exist in balances
Â Â Â Â Â Â Â Â currentBalances[userEmail] = { usd: 0, eur: 0 };
Â Â Â Â Â Â Â Â localStorage.setItem('mockUserBalances', JSON.stringify(currentBalances));
Â Â Â Â Â Â }
Â Â Â Â Â Â 
Â Â Â Â Â Â // Update user profile with preferred currency
Â Â Â Â Â Â const preferredCurrency = getUserPreferredCurrency(userEmail);
Â Â Â Â Â Â 
Â Â Â Â Â Â setUser(prev => ({
Â Â Â Â Â Â Â Â ...prev,
Â Â Â Â Â Â Â Â email: userEmail,
Â Â Â Â Â Â Â Â first_name: authUser.given_name || prev.first_name,
Â Â Â Â Â Â Â Â last_name: authUser.family_name || prev.last_name,
Â Â Â Â Â Â Â Â nickname: authUser.nickname || prev.nickname,
Â Â Â Â Â Â Â Â profile: {
Â Â Â Â Â Â Â Â Â Â ...prev.profile,
Â Â Â Â Â Â Â Â Â Â currency: preferredCurrency
Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â }));
Â Â Â Â Â Â 
Â Â Â Â Â Â // Debug log when user changes
Â Â Â Â Â Â console.log(`User changed to ${userEmail}. Current balances:`, currentBalances[userEmail]);
Â Â Â Â }
Â Â }, [isAuthenticated, authUser]);
Â Â 
Â Â // Calculate total user balance
Â Â const getUserTotalBalance = (email, currency = 'usd') => {
Â Â Â Â const userBalances = balances[email] || { usd: 0, eur: 0 };
Â Â Â Â if (currency === 'usd') {
Â Â Â Â Â Â return userBalances.usd + (userBalances.eur * (1/USD_TO_EUR_RATE));
Â Â Â Â } else if (currency === 'eur') {
Â Â Â Â Â Â return userBalances.eur + (userBalances.usd * USD_TO_EUR_RATE);
Â Â Â Â }
Â Â Â Â return 0;
Â Â };
Â Â 
Â Â const [mockData, setMockData] = useState({
Â Â Â Â wallets: generateWallets(user.email, balances),
Â Â Â Â transactions: transactions.filter(t => t.user_email === user.email),
Â Â Â Â notifications: notifications.filter(n => n.user_email === user.email),
Â Â Â Â requests: [],
Â Â Â Â user: user
Â Â });
Â Â 
Â Â // Update balances and save to localStorage
Â Â const updateBalances = (newBalances) => {
Â Â Â Â console.log('Updating balances:', newBalances);
Â Â Â Â setBalances(newBalances);
Â Â Â Â localStorage.setItem('mockUserBalances', JSON.stringify(newBalances));

Â Â Â Â // persist to backend
Â Â Â Â Object.entries(newBalances).forEach(async ([email,balance])=>{
Â Â Â Â Â Â try {
Â Â Â Â Â Â Â Â await fetch(`/mock/wallet/balances/${email}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(balance)});
Â Â Â Â Â Â } catch(err){console.warn('Failed to sync balance',email,err);} 
Â Â Â Â });
Â Â };
Â Â 
Â Â // Create and save a notification
Â Â const createNotification = (userEmail, type, data) => {
Â Â Â Â const timestamp = new Date().toISOString();
Â Â Â Â const id = `n-${Math.floor(Math.random() * 1000000)}`;
Â Â Â Â const preferredCurrency = getUserPreferredCurrency(userEmail);
Â Â Â Â 
Â Â Â Â // Format amount in user's preferred currency if applicable
Â Â Â Â let formattedAmount = null;
Â Â Â Â if (data.amount && data.currency) {
Â Â Â Â Â Â formattedAmount = formatCurrency(Math.abs(data.amount), data.currency, preferredCurrency);
Â Â Â Â }
Â Â Â Â 
Â Â Â Â // Create notification message based on type
Â Â Â Â let message = '';
Â Â Â Â let title = '';
Â Â Â Â 
Â Â Â Â switch (type) {
Â Â Â Â Â Â case 'SEND_MONEY':
Â Â Â Â Â Â Â Â title = 'Money Sent';
Â Â Â Â Â Â Â Â message = `You sent ${formattedAmount} to ${data.recipientName || data.recipientEmail}`;
Â Â Â Â Â Â Â Â break;
Â Â Â Â Â Â case 'RECEIVE_MONEY':
Â Â Â Â Â Â Â Â title = 'Money Received';
Â Â Â Â Â Â Â Â message = `${data.senderName || data.senderEmail} sent you ${formattedAmount}`;
Â Â Â Â Â Â Â Â break;
Â Â Â Â Â Â case 'MONEY_REQUEST':
Â Â Â Â Â Â Â Â title = 'Money Request';
Â Â Â Â Â Â Â Â message = `${data.requesterName || data.requesterEmail} requested ${formattedAmount} from you`;
Â Â Â Â Â Â Â Â break;
Â Â Â Â Â Â case 'REQUEST_FULFILLED':
Â Â Â Â Â Â Â Â title = 'Request Fulfilled';
Â Â Â Â Â Â Â Â message = `${data.senderName || data.senderEmail} fulfilled your request for ${formattedAmount}`;
Â Â Â Â Â Â Â Â break;
Â Â Â Â Â Â default:
Â Â Â Â Â Â Â Â title = 'Notification';
Â Â Â Â Â Â Â Â message = data.message || 'You have a new notification';
Â Â Â Â }
Â Â Â Â 
Â Â Â Â const notification = {
Â Â Â Â Â Â id,
Â Â Â Â Â Â user_email: userEmail,
Â Â Â Â Â Â type,
Â Â Â Â Â Â title,
Â Â Â Â Â Â message,
Â Â Â Â Â Â data,
Â Â Â Â Â Â timestamp,
Â Â Â Â Â Â read: false
Â Â Â Â };
Â Â Â Â 
Â Â Â Â // Save and update notifications
Â Â Â Â const updatedNotifications = addNotification(notification);
Â Â Â Â setNotifications(updatedNotifications);
Â Â Â Â 
Â Â Â Â return notification;
Â Â };
Â Â 
Â Â // Mark a notification as read
Â Â const markNotificationAsRead = (notificationId) => {
Â Â Â Â const currentNotifications = getNotificationsSync();
Â Â Â Â const updatedNotifications = currentNotifications.map(n => 
Â Â Â Â Â Â n.id === notificationId ? { ...n, read: true } : n
Â Â Â Â );
Â Â Â Â 
Â Â Â Â saveNotifications(updatedNotifications);
Â Â Â Â setNotifications(updatedNotifications);
Â Â Â Â 
Â Â Â Â return updatedNotifications;
Â Â };
Â Â 
Â Â // Mark all notifications as read for a user
Â Â const markAllNotificationsAsRead = (userEmail) => {
Â Â Â Â const currentNotifications = getNotificationsSync();
Â Â Â Â const updatedNotifications = currentNotifications.map(n => 
Â Â Â Â Â Â n.user_email === userEmail ? { ...n, read: true } : n
Â Â Â Â );
Â Â Â Â 
Â Â Â Â saveNotifications(updatedNotifications);
Â Â Â Â setNotifications(updatedNotifications);
Â Â Â Â 
Â Â Â Â return updatedNotifications;
Â Â };
Â Â 
Â Â // Simulate API endpoints
Â Â const mockAPI = {
Â Â Â Â walletAPI: {
Â Â Â Â Â Â getOverview: async () => {
Â Â Â Â Â Â Â Â // Always get fresh data from localStorage
Â Â Â Â Â Â Â Â const currentBalances = getUserBalancesSync();
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Generate wallets based on current user
Â Â Â Â Â Â Â Â const email = mockData.user?.email;
Â Â Â Â Â Â Â Â console.log("MockAPI: Current user email:", email);
Â Â Â Â Â Â Â Â console.log("MockAPI: Current balances:", currentBalances);
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â const wallets = generateWallets(email, currentBalances);
Â Â Â Â Â Â Â Â console.log("MockAPI: Generated wallets:", wallets);
Â Â Â Â Â Â Â Â return Promise.resolve({ data: { wallets } });
Â Â Â Â Â Â },
Â Â Â Â Â Â getAllTransactions: () => {
Â Â Â Â Â Â Â Â // Filter transactions for current user - both sent and received
Â Â Â Â Â Â Â Â const email = mockData.user?.email;
Â Â Â Â Â Â Â Â const userTransactions = transactions.filter(t => t.user_email === email);
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â console.log(`Getting transactions for ${email}:`, userTransactions);
Â Â Â Â Â Â Â Â return Promise.resolve({ data: { transactions: userTransactions } });
Â Â Â Â Â Â },
Â Â Â Â Â Â getNotifications: () => {
Â Â Â Â Â Â Â Â // Filter notifications for current user
Â Â Â Â Â Â Â Â const email = mockData.user?.email;
Â Â Â Â Â Â Â Â const userNotifications = notifications.filter(n => n.user_email === email);
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â return Promise.resolve({ data: { notifications: userNotifications } });
Â Â Â Â Â Â },
Â Â Â Â Â Â markNotificationRead: (id) => {
Â Â Â Â Â Â Â Â const updatedNotifications = markNotificationAsRead(id);
Â Â Â Â Â Â Â Â return Promise.resolve({ data: { success: true } });
Â Â Â Â Â Â },
Â Â Â Â Â Â markAllNotificationsRead: () => {
Â Â Â Â Â Â Â Â const email = mockData.user?.email;
Â Â Â Â Â Â Â Â const updatedNotifications = markAllNotificationsAsRead(email);
Â Â Â Â Â Â Â Â return Promise.resolve({ data: { success: true } });
Â Â Â Â Â Â }
Â Â Â Â },
Â Â Â Â authAPI: {
Â Â Â Â Â Â getCurrentUser: () => Promise.resolve({ data: mockData.user }),
Â Â Â Â Â Â searchUsers: (query) => {
Â Â Â Â Â Â Â Â // Mock search for users - include Hadeer's account for testing
Â Â Â Â Â Â Â Â const mockUsers = [
Â Â Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â Â Â id: 'user-1',
Â Â Â Â Â Â Â Â Â Â Â Â email: 'hadeermotair@gmail.com',
Â Â Â Â Â Â Â Â Â Â Â Â name: 'Hadeer Motair',
Â Â Â Â Â Â Â Â Â Â Â Â has_wallet: true,
Â Â Â Â Â Â Â Â Â Â },
Â Â Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â Â Â id: 'user-raj',
Â Â Â Â Â Â Â Â Â Â Â Â email: 'rajshah11@gmail.com',
Â Â Â Â Â Â Â Â Â Â Â Â name: 'Raj Shah',
Â Â Â Â Â Â Â Â Â Â Â Â has_wallet: true,
Â Â Â Â Â Â Â Â Â Â },
Â Â Â Â Â Â Â Â ];
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Filter based on query but ensure results are returned with empty query
Â Â Â Â Â Â Â Â const results = query === '' ? 
Â Â Â Â Â Â Â Â Â Â mockUsers : 
Â Â Â Â Â Â Â Â Â Â mockUsers.filter(user => 
Â Â Â Â Â Â Â Â Â Â Â Â user.email.toLowerCase().includes(query.toLowerCase()) || 
Â Â Â Â Â Â Â Â Â Â Â Â user.name.toLowerCase().includes(query.toLowerCase())
Â Â Â Â Â Â Â Â Â Â );
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â return Promise.resolve({ data: { users: results } });
Â Â Â Â Â Â }
Â Â Â Â },
Â Â Â Â transferAPI: {
Â Â Â Â Â Â /**
Â Â Â Â Â Â Â * Fully-offline mock implementation of the `POST /transfer` endpoint.
Â Â Â Â Â Â Â *
Â Â Â Â Â Â Â * Business rules implemented:
Â Â Â Â Â Â Â * 1. Deduct the total cost (amount + fees) from the sender's USD wallet.
Â Â Â Â Â Â Â *Â Â Â Â â€¢ If `amount_from_wallet` is provided (wallet + bank split), the
Â Â Â Â Â Â Â *Â Â Â Â Â Â sender's USD wallet is set to 0 (representing "use everything
Â Â Â Â Â Â Â *Â Â Â Â Â Â in wallet").
Â Â Â Â Â Â Â * 2. Apply fees: 0.5 % on wallet portion, 0.5 % (standard) or 2 %
Â Â Â Â Â Â Â *Â Â Â Â (express) on bank portion.
Â Â Â Â Â Â Â * 3. Convert the net amount (after fees) to EUR at 0.9 USDâ†’EUR when the
Â Â Â Â Â Â Â *Â Â Â Â recipient is Hadeer; otherwise keep it in USD.
Â Â Â Â Â Â Â * 4. Credit the recipient's wallet with that net amount.
Â Â Â Â Â Â Â */
Â Â Â Â Â Â send: async (payload) => {
Â Â Â Â Â Â Â Â const senderEmail = mockData.user?.email;

Â Â Â Â Â Â Â Â // Resolve recipient email from id
Â Â Â Â Â Â Â Â const idMap = {
Â Â Â Â Â Â Â Â Â Â // Hadeer
Â Â Â Â Â Â Â Â Â Â 'user-1': 'hadeermotair@gmail.com',
Â Â Â Â Â Â Â Â Â Â 'user-hadeer': 'hadeermotair@gmail.com',
Â Â Â Â Â Â Â Â Â Â '1': 'hadeermotair@gmail.com',
Â Â Â Â Â Â Â Â Â Â // Other demo users
Â Â Â Â Â Â Â Â Â Â 'user-2': 'user@example.com',
Â Â Â Â Â Â Â Â Â Â 'user-3': 'rajshah11@gmail.com',
Â Â Â Â Â Â Â Â Â Â '2': 'user@example.com',
Â Â Â Â Â Â Â Â Â Â '3': 'rajshah11@gmail.com',
Â Â Â Â Â Â Â Â };
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Map of names for notifications and descriptions
Â Â Â Â Â Â Â Â const nameMap = {
Â Â Â Â Â Â Â Â Â Â 'hadeermotair@gmail.com': 'Hadeer Motair',
Â Â Â Â Â Â Â Â Â Â 'user@example.com': 'Example User',
Â Â Â Â Â Â Â Â Â Â 'rajshah11@gmail.com': 'Raj Shah',
Â Â Â Â Â Â Â Â };
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â let recipientEmail = payload.recipient_email;
Â Â Â Â Â Â Â Â if (!recipientEmail) {
Â Â Â Â Â Â Â Â Â Â if (payload.recipient_user_id?.includes('@')) {
Â Â Â Â Â Â Â Â Â Â Â Â recipientEmail = payload.recipient_user_id;
Â Â Â Â Â Â Â Â Â Â } else {
Â Â Â Â Â Â Â Â Â Â Â Â recipientEmail = idMap[payload.recipient_user_id] || 'unknown@example.com';
Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â const amount = parseFloat(payload.amount);
Â Â Â Â Â Â Â Â const walletPart = payload.amount_from_wallet !== undefined ? parseFloat(payload.amount_from_wallet) : amount;
Â Â Â Â Â Â Â Â const bankPart = payload.amount_from_bank !== undefined ? parseFloat(payload.amount_from_bank) : 0;

Â Â Â Â Â Â Â Â const isExpress = payload.speed_option === 'express';
Â Â Â Â Â Â Â Â const walletFee = walletPart * 0.005; // 0.5 %
Â Â Â Â Â Â Â Â const bankRate = isExpress ? 0.02 : 0.005; // 2 % or 0.5 %
Â Â Â Â Â Â Â Â const bankFee = bankPart * bankRate;
Â Â Â Â Â Â Â Â const totalFee = walletFee + bankFee;

Â Â Â Â Â Â Â Â // ---------- Update balances ----------
Â Â Â Â Â Â Â Â const currentBalances = getUserBalancesSync();
Â Â Â Â Â Â Â Â const ensureUser = (email) => {
Â Â Â Â Â Â Â Â Â Â if (!currentBalances[email]) {
Â Â Â Â Â Â Â Â Â Â Â Â currentBalances[email] = { usd: 0, eur: 0 };
Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â };

Â Â Â Â Â Â Â Â ensureUser(senderEmail);
Â Â Â Â Â Â Â Â ensureUser(recipientEmail);

Â Â Â Â Â Â Â Â // 1. Deduct from sender USD wallet
Â Â Â Â Â Â Â Â if (bankPart > 0) {
Â Â Â Â Â Â Â Â Â Â // Wallet + bank: wallet drained to zero
Â Â Â Â Â Â Â Â Â Â currentBalances[senderEmail].usd = 0;
Â Â Â Â Â Â Â Â } else {
Â Â Â Â Â Â Â Â Â Â currentBalances[senderEmail].usd = Math.max(
Â Â Â Â Â Â Â Â Â Â Â Â 0,
Â Â Â Â Â Â Â Â Â Â Â Â (currentBalances[senderEmail].usd || 0) - (amount + totalFee)
Â Â Â Â Â Â Â Â Â Â );
Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â // 2. Credit recipient
Â Â Â Â Â Â Â Â const netAmount = amount - totalFee; // amount actually delivered (USD)
Â Â Â Â Â Â Â Â let recipientCurrency = 'USD';
Â Â Â Â Â Â Â Â let recipientAmount = netAmount;
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â if (recipientEmail === 'hadeermotair@gmail.com') {
Â Â Â Â Â Â Â Â Â Â // Convert USDâ†’EUR at 0.9
Â Â Â Â Â Â Â Â Â Â recipientCurrency = 'EUR';
Â Â Â Â Â Â Â Â Â Â recipientAmount = parseFloat((netAmount * 0.9).toFixed(2));
Â Â Â Â Â Â Â Â Â Â currentBalances[recipientEmail].eur = (currentBalances[recipientEmail].eur || 0) + recipientAmount;
Â Â Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â Â Â console.log(`Crediting ${recipientEmail} with ${recipientAmount} EUR. New balance:`, 
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â currentBalances[recipientEmail]);
Â Â Â Â Â Â Â Â } else {
Â Â Â Â Â Â Â Â Â Â // Same currency
Â Â Â Â Â Â Â Â Â Â currentBalances[recipientEmail].usd = (currentBalances[recipientEmail].usd || 0) + netAmount;
Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â // Persist balances
Â Â Â Â Â Â Â Â updateBalances(currentBalances);
Â Â Â Â Â Â Â Â console.log('Updated balances after transfer:', currentBalances);

Â Â Â Â Â Â Â Â // ---------- Record transaction (sender and recipient) ----------
Â Â Â Â Â Â Â Â const timestamp = new Date().toISOString();
Â Â Â Â Â Â Â Â const transactionId = `t-${Math.floor(Math.random() * 1000000)}`;
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Get sender and recipient names
Â Â Â Â Â Â Â Â const senderName = nameMap[senderEmail] || senderEmail;
Â Â Â Â Â Â Â Â const recipientName = nameMap[recipientEmail] || recipientEmail;

Â Â Â Â Â Â Â Â // Sender transaction record (negative)
Â Â Â Â Â Â Â Â const senderTransaction = {
Â Â Â Â Â Â Â Â Â Â id: transactionId,
Â Â Â Â Â Â Â Â Â Â transaction_id: transactionId,
Â Â Â Â Â Â Â Â Â Â type: 'SEND',
Â Â Â Â Â Â Â Â Â Â amount: -amount, // Negative amount for sender
Â Â Â Â Â Â Â Â Â Â currency: 'USD',
Â Â Â Â Â Â Â Â Â Â date: timestamp,
Â Â Â Â Â Â Â Â Â Â description: payload.memo || `Payment to ${recipientName}`,
Â Â Â Â Â Â Â Â Â Â status: 'completed',
Â Â Â Â Â Â Â Â Â Â user_email: senderEmail,
Â Â Â Â Â Â Â Â Â Â recipient_email: recipientEmail,
Â Â Â Â Â Â Â Â Â Â recipient_name: recipientName
Â Â Â Â Â Â Â Â };

Â Â Â Â Â Â Â Â // Recipient transaction record (positive)
Â Â Â Â Â Â Â Â const recipientTransaction = {
Â Â Â Â Â Â Â Â Â Â id: transactionId + '-r',
Â Â Â Â Â Â Â Â Â Â transaction_id: transactionId,
Â Â Â Â Â Â Â Â Â Â type: 'RECEIVE',
Â Â Â Â Â Â Â Â Â Â amount: recipientAmount, // Positive amount for recipient in their currency
Â Â Â Â Â Â Â Â Â Â currency: recipientCurrency,
Â Â Â Â Â Â Â Â Â Â date: timestamp,
Â Â Â Â Â Â Â Â Â Â description: payload.memo || `Payment from ${senderName}`,
Â Â Â Â Â Â Â Â Â Â status: 'completed',
Â Â Â Â Â Â Â Â Â Â user_email: recipientEmail,
Â Â Â Â Â Â Â Â Â Â sender_email: senderEmail,
Â Â Â Â Â Â Â Â Â Â sender_name: senderName
Â Â Â Â Â Â Â Â };

Â Â Â Â Â Â Â Â const newTransactions = [senderTransaction, recipientTransaction, ...transactions];
Â Â Â Â Â Â Â Â setTransactions(newTransactions);
Â Â Â Â Â Â Â Â localStorage.setItem('mockTransactions', JSON.stringify(newTransactions));
Â Â Â Â Â Â Â Â console.log('New transactions after transfer:', newTransactions);
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // ---------- Create notifications ----------
Â Â Â Â Â Â Â Â // Notification for sender
Â Â Â Â Â Â Â Â createNotification(
Â Â Â Â Â Â Â Â Â Â senderEmail,
Â Â Â Â Â Â Â Â Â Â 'SEND_MONEY',
Â Â Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â Â Â transactionId,
Â Â Â Â Â Â Â Â Â Â Â Â amount: -amount,
Â Â Â Â Â Â Â Â Â Â Â Â currency: 'USD',
Â Â Â Â Â Â Â Â Â Â Â Â recipientEmail,
Â Â Â Â Â Â Â Â Â Â Â Â recipientName
Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â );
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Notification for recipient
Â Â Â Â Â Â Â Â createNotification(
Â Â Â Â Â Â Â Â Â Â recipientEmail,
Â Â Â Â Â Â Â Â Â Â 'RECEIVE_MONEY',
Â Â Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â Â Â transactionId,
Â Â Â Â Â Â Â Â Â Â Â Â amount: recipientAmount, // In recipient's currency
Â Â Â Â Â Â Â Â Â Â Â Â currency: recipientCurrency,
Â Â Â Â Â Â Â Â Â Â Â Â senderEmail,
Â Â Â Â Â Â Â Â Â Â Â Â senderName
Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â );

Â Â Â Â Â Â Â Â return Promise.resolve({ data: senderTransaction });
Â Â Â Â Â Â },
Â Â Â Â },
Â Â Â Â requestsAPI: {
Â Â Â Â Â Â create: (payload) => {
Â Â Â Â Â Â Â Â const requesterEmail = mockData.user?.email;
Â Â Â Â Â Â Â Â const recipientEmail = payload.recipient_email || payload.email;
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Map email to name for notifications
Â Â Â Â Â Â Â Â const nameMap = {
Â Â Â Â Â Â Â Â Â Â 'hadeermotair@gmail.com': 'Hadeer Motair',
Â Â Â Â Â Â Â Â Â Â 'user@example.com': 'Example User',
Â Â Â Â Â Â Â Â Â Â 'rajshah11@gmail.com': 'Raj Shah',
Â Â Â Â Â Â Â Â };
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â const newRequest = {
Â Â Â Â Â Â Â Â Â Â id: `r-${Math.floor(Math.random() * 1000)}`,
Â Â Â Â Â Â Â Â Â Â amount: payload.amount,
Â Â Â Â Â Â Â Â Â Â currency: 'USD',
Â Â Â Â Â Â Â Â Â Â status: 'pending',
Â Â Â Â Â Â Â Â Â Â created_at: new Date().toISOString(),
Â Â Â Â Â Â Â Â Â Â requester_email: requesterEmail,
Â Â Â Â Â Â Â Â Â Â recipient_email: recipientEmail,
Â Â Â Â Â Â Â Â Â Â note: payload.note || ''
Â Â Â Â Â Â Â Â };
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Update requests in mockData
Â Â Â Â Â Â Â Â setMockData(prev => ({
Â Â Â Â Â Â Â Â Â Â ...prev,
Â Â Â Â Â Â Â Â Â Â requests: [newRequest, ...prev.requests]
Â Â Â Â Â Â Â Â }));
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Create notification for request recipient
Â Â Â Â Â Â Â Â createNotification(
Â Â Â Â Â Â Â Â Â Â recipientEmail,
Â Â Â Â Â Â Â Â Â Â 'MONEY_REQUEST',
Â Â Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â Â Â requestId: newRequest.id,
Â Â Â Â Â Â Â Â Â Â Â Â amount: payload.amount,
Â Â Â Â Â Â Â Â Â Â Â Â currency: 'USD',
Â Â Â Â Â Â Â Â Â Â Â Â requesterEmail,
Â Â Â Â Â Â Â Â Â Â Â Â requesterName: nameMap[requesterEmail] || requesterEmail,
Â Â Â Â Â Â Â Â Â Â Â Â note: payload.note
Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â );
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â return Promise.resolve({ data: newRequest });
Â Â Â Â Â Â },
Â Â Â Â Â Â list: () => Promise.resolve({ data: { requests: mockData.requests } }),
Â Â Â Â Â Â fulfill: (requestId, paymentDetails) => {
Â Â Â Â Â Â Â Â // Find the request
Â Â Â Â Â Â Â Â const request = mockData.requests.find(r => r.id === requestId);
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â if (!request) {
Â Â Â Â Â Â Â Â Â Â return Promise.reject({ error: 'Request not found' });
Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Prepare payment payload
Â Â Â Â Â Â Â Â const paymentPayload = {
Â Â Â Â Â Â Â Â Â Â amount: request.amount,
Â Â Â Â Â Â Â Â Â Â recipient_email: request.requester_email,
Â Â Â Â Â Â Â Â Â Â memo: `Payment for request: ${request.note}`,
Â Â Â Â Â Â Â Â Â Â ...paymentDetails
Â Â Â Â Â Â Â Â };
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Process the payment using the send function
Â Â Â Â Â Â Â Â return mockAPI.transferAPI.send(paymentPayload)
Â Â Â Â Â Â Â Â Â Â .then(result => {
Â Â Â Â Â Â Â Â Â Â Â Â // Update request status
Â Â Â Â Â Â Â Â Â Â Â Â const updatedRequests = mockData.requests.map(r => 
Â Â Â Â Â Â Â Â Â Â Â Â Â Â r.id === requestId ? { ...r, status: 'fulfilled' } : r
Â Â Â Â Â Â Â Â Â Â Â Â );
Â Â Â Â Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â Â Â Â Â setMockData(prev => ({
Â Â Â Â Â Â Â Â Â Â Â Â Â Â ...prev,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â requests: updatedRequests
Â Â Â Â Â Â Â Â Â Â Â Â }));
Â Â Â Â Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â Â Â Â Â // Create notification for requester
Â Â Â Â Â Â Â Â Â Â Â Â createNotification(
Â Â Â Â Â Â Â Â Â Â Â Â Â Â request.requester_email,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'REQUEST_FULFILLED',
Â Â Â Â Â Â Â Â Â Â Â Â Â Â {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â requestId,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â amount: request.amount,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â currency: 'USD',
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â senderEmail: mockData.user?.email,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â senderName: mockData.user?.first_name + ' ' + mockData.user?.last_name
Â Â Â Â Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â Â Â Â Â );
Â Â Â Â Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â Â Â Â Â return { data: { request: { ...request, status: 'fulfilled' } } };
Â Â Â Â Â Â Â Â Â Â });
Â Â Â Â Â Â }
Â Â Â Â }
Â Â };

Â Â // Update mock data when user, transactions, balances, or notifications change
Â Â useEffect(() => {
Â Â Â Â const email = user.email;
Â Â Â Â const currentBalances = getUserBalancesSync();
Â Â Â Â 
Â Â Â Â // Ensure fresh wallet data is generated from current balances
Â Â Â Â const wallets = generateWallets(email, currentBalances);
Â Â Â Â 
Â Â Â Â // Get transactions for current user
Â Â Â Â const userTransactions = transactions.filter(t => t.user_email === email);
Â Â Â Â 
Â Â Â Â // Get notifications for current user
Â Â Â Â const userNotifications = notifications.filter(n => n.user_email === email);
Â Â Â Â 
Â Â Â Â setMockData({
Â Â Â Â Â Â wallets: wallets,
Â Â Â Â Â Â transactions: userTransactions,
Â Â Â Â Â Â notifications: userNotifications,
Â Â Â Â Â Â requests: mockData.requests.filter(r => r.recipient_email === email || r.requester_email === email),
Â Â Â Â Â Â user: user
Â Â Â Â });
Â Â Â Â 
Â Â Â Â console.log(`Updated mockData for ${email}:`, {
Â Â Â Â Â Â wallets: wallets,
Â Â Â Â Â Â transactions: userTransactions.length,
Â Â Â Â Â Â notifications: userNotifications.length,
Â Â Â Â Â Â balances: currentBalances[email]
Â Â Â Â });
Â Â }, [user, transactions, balances, notifications]);

Â Â useEffect(() => {
Â Â Â Â // Override the global API calls with our mock functions
Â Â Â Â // This is a simple way to inject mock data without changing existing components
Â Â Â Â window.mockOverrides = mockAPI;
Â Â Â Â 
Â Â Â Â return () => {
Â Â Â Â Â Â // Clean up
Â Â Â Â Â Â delete window.mockOverrides;
Â Â Â Â };
Â Â }, [mockData]);

Â Â return (
Â Â Â Â <MockDataContext.Provider value={{ 
Â Â Â Â Â Â mockData, 
Â Â Â Â Â Â setMockData, 
Â Â Â Â Â Â setUser,
Â Â Â Â Â Â createNotification,
Â Â Â Â Â Â markNotificationAsRead,
Â Â Â Â Â Â markAllNotificationsAsRead,
Â Â Â Â Â Â formatCurrency
Â Â Â Â }}>
Â Â Â Â Â Â {children}
Â Â Â Â </MockDataContext.Provider>
Â Â );
};

// Hook to use mock data
export const useMockData = () => {
Â Â const context = useContext(MockDataContext);
Â Â if (context === undefined) {
Â Â Â Â throw new Error('useMockData must be used within a MockDataProvider');
Â Â }
Â Â return context;
};

export default MockDataProvider;